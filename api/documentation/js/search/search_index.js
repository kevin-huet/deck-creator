var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.245,1,2.012]],["body/controllers/AppController.html",[0,2.04,1,3.295,2,1.65,3,0.363,4,0.308,5,0.308,6,3.464,7,0.54,8,1.014,9,5.141,10,4.158,11,4.332,12,1.971,13,0.033,14,5.141,15,0.744,16,4.158,17,0.985,18,0.744,19,0.9,20,3.577,21,0.82,22,1.719,23,0.592,24,2.392,25,0.479,26,2.907,27,3.464,28,0.363,29,0.308,30,1.801,31,3.464,32,4.158,33,1.39,34,5.141,35,4.158,36,1.277,37,4.158,38,0.026,39,0.026]],["title/modules/AppModule.html",[40,1.143,41,2.012]],["body/modules/AppModule.html",[1,2.906,2,1.547,3,0.239,4,0.203,5,0.203,8,0.541,13,0.034,15,0.491,17,0.65,18,0.491,19,0.594,21,0.541,23,0.717,25,0.316,26,2.822,27,2.285,28,0.239,29,0.203,38,0.02,39,0.02,40,1.419,41,4.102,42,1.188,43,1.688,44,2.285,45,2.285,46,2.285,47,3.118,48,3.118,49,3.118,50,2.822,51,2.347,52,3.118,53,3.118,54,2.347,55,1.528,56,3.118,57,1.812,58,2.03,59,1.428,60,1.428,61,2.743,62,2.243,63,2.818,64,2.743,65,3.897,66,4.937,67,2.743,68,0.491,69,3.897,70,3.897,71,2.743,72,2.285,73,2.743,74,2.743,75,2.285,76,3.897,77,1.188,78,1.578,79,2.743,80,2.743,81,2.743,82,2.743,83,1.578,84,2.285,85,1.088,86,1.983,87,3.247,88,1.758,89,2.743,90,1.758,91,2.743,92,2.743,93,2.743,94,1.758,95,2.743,96,2.743,97,2.285,98,2.743,99,2.743]],["title/injectables/AppService.html",[26,1.634,100,0.233]],["body/injectables/AppService.html",[3,0.397,4,0.338,5,0.338,7,0.591,8,1.071,13,0.033,15,0.815,21,0.898,22,1.816,23,0.524,25,0.524,26,2.829,28,0.397,29,0.338,36,1.398,38,0.028,39,0.028,100,0.403,101,1.283,102,3.791,103,6.012,104,4.551,105,4.551,106,4.551]],["title/controllers/AuthController.html",[0,1.245,107,2.012]],["body/controllers/AuthController.html",[0,0.972,2,0.972,3,0.214,4,0.182,5,0.182,7,0.318,8,0.709,11,3.896,12,2.472,13,0.034,15,0.934,17,1.235,18,0.934,19,1.128,20,2.303,21,1.028,23,0.62,24,1.41,25,0.282,28,0.214,29,0.182,30,1.061,33,1.567,36,1.601,38,0.018,39,0.018,51,1.843,68,0.762,77,1.061,107,2.303,108,2.041,109,1.772,110,2.041,111,3.593,112,1.701,113,2.993,114,3.593,115,3.593,116,3.593,117,2.598,118,2.45,119,2.45,120,2.45,121,1.98,122,2.45,123,3.767,124,4.488,125,3.593,126,2.45,127,3.388,128,2.365,129,2.45,130,3.593,131,2.45,132,2.45,133,3.003,134,3.593,135,2.45,136,2.45,137,3.593,138,2.45,139,2.45,140,3.593,141,2.45,142,1.772,143,2.041,144,1.772,145,2.303,146,2.041,147,1.41,148,2.727,149,2.041,150,2.45,151,1.571,152,2.598,153,3.593,154,2.041,155,2.45,156,2.45,157,1.439,158,2.45,159,3.593,160,3.593,161,2.45,162,2.45,163,3.593,164,2.45,165,1.41,166,2.45,167,2.45,168,1.688,169,1.843,170,2.448,171,2.598,172,2.993,173,2.45,174,2.727,175,1.843,176,2.45,177,2.45,178,2.45,179,1.772,180,2.45,181,2.45,182,2.598,183,2.45,184,2.45,185,2.45,186,3.593,187,3.593,188,2.993,189,3.593,190,2.45,191,2.45,192,2.041,193,2.45,194,2.45,195,2.041]],["title/modules/AuthModule.html",[40,1.143,47,1.806]],["body/modules/AuthModule.html",[2,1.771,3,0.291,4,0.248,5,0.248,13,0.034,23,0.709,25,0.384,28,0.291,29,0.248,38,0.023,39,0.023,40,1.625,42,1.446,43,1.933,47,3.655,50,2.998,51,2.689,54,2.494,55,1.623,57,1.925,58,2.324,59,1.738,60,1.738,62,2.568,63,3.227,72,2.78,83,1.92,85,1.324,86,2.413,88,2.139,107,3.223,146,2.78,152,3.227,196,2.78,197,3.337,198,2.78,199,2.78,200,3.312,201,3.337,202,4.463,203,3.337,204,3.337,205,4.463,206,2.139,207,3.337,208,3.337,209,3.337,210,2.78,211,3.337,212,3.337,213,3.337]],["title/injectables/AuthService.html",[51,1.359,100,0.233]],["body/injectables/AuthService.html",[3,0.139,4,0.118,5,0.118,7,0.207,8,0.509,13,0.034,15,0.951,17,1.258,18,0.951,19,1.149,21,1.027,22,2.057,23,0.553,24,0.919,25,0.184,28,0.139,29,0.118,33,1.703,36,1.722,38,0.013,39,0.013,51,1.118,54,1.998,55,1.052,57,1.248,68,0.98,83,0.919,85,0.633,86,1.154,87,3.108,88,1.023,100,0.191,101,0.45,112,1.674,113,2.706,117,1.866,121,2.331,123,2.082,127,2.698,128,1.769,145,1.023,148,3.265,157,1.523,165,0.919,168,0.633,169,1.898,170,2.763,174,2.957,175,2.08,188,1.33,214,1.33,215,5.065,216,1.866,217,2.706,218,2.581,219,2.581,220,3.731,221,2.581,222,2.581,223,2.654,224,3.108,225,2.581,226,1.118,227,1.596,228,2.134,229,1.596,230,2.581,231,2.15,232,2.706,233,1.596,234,1.692,235,2.581,236,1.596,237,4.382,238,2.653,239,2.581,240,1.596,241,2.581,242,2.854,243,1.596,244,2.581,245,3.731,246,1.596,247,2.706,248,1.596,249,1.485,250,1.596,251,2.581,252,1.596,253,2.581,254,1.596,255,2.581,256,1.596,257,2.581,258,1.596,259,3.248,260,2.581,261,3.651,262,1.596,263,2.581,264,1.33,265,1.33,266,0.691,267,1.596,268,1.596,269,1.154,270,1.596,271,2.581,272,1.154,273,1.866,274,1.596,275,1.596,276,1.596,277,3.248,278,3.248,279,1.596,280,1.596,281,1.596,282,3.248,283,1.596,284,1.596,285,2.581,286,1.596,287,2.15,288,1.596,289,1.33,290,1.692,291,2.706,292,2.581,293,2.581,294,1.596,295,1.596,296,1.596,297,2.581,298,2.15,299,1.866,300,4.801,301,2.957,302,4.612,303,1.596,304,2.581,305,3.108,306,2.581,307,1.596,308,2.15,309,1.596,310,1.596,311,1.596,312,1.596,313,1.596,314,1.596,315,1.596,316,1.33,317,2.581,318,1.596,319,1.33,320,2.581,321,1.596,322,1.596,323,1.596,324,1.596,325,1.596,326,1.596,327,1.596,328,1.596]],["title/interfaces/CardDto.html",[329,1.806,330,2.012]],["body/interfaces/CardDto.html",[3,0.358,4,0.304,5,0.304,7,0.533,13,0.033,18,1.039,19,1.256,22,2.102,28,0.358,38,0.026,39,0.026,68,1.089,329,2.361,330,3.268,331,2.966,332,3.417,333,2.208,334,3.719,335,3.022,336,4.196,337,3.719,338,4.196,339,3.273]],["title/injectables/CreateCardCommand.html",[52,1.806,100,0.233]],["body/injectables/CreateCardCommand.html",[3,0.16,4,0.136,5,0.136,7,0.238,8,0.568,12,0.868,13,0.034,15,0.785,17,0.682,18,0.834,19,0.623,21,0.568,23,0.464,25,0.211,28,0.16,29,0.136,33,1.467,38,0.015,39,0.015,52,1.657,55,1.138,68,0.785,77,0.794,78,2.321,85,0.727,100,0.214,101,0.517,112,1.313,157,1.496,175,1.248,223,2.679,226,1.542,228,1.854,234,1.5,269,1.325,272,1.325,273,1.325,333,1.248,334,3.848,335,1.5,336,3.648,337,1.846,338,2.083,339,2.284,340,1.526,341,3.522,342,3.234,343,2.399,344,2.88,345,1.832,346,1.325,347,2.88,348,2.083,349,2.048,350,3.327,351,1.832,352,2.88,353,1.832,354,2.88,355,1.832,356,2.574,357,1.526,358,1.174,359,1.174,360,1.174,361,1.325,362,1.526,363,1.526,364,1.526,365,1.325,366,1.054,367,1.832,368,1.832,369,1.832,370,1.526,371,1.832,372,1.526,373,1.174,374,3.879,375,1.174,376,3.559,377,3.172,378,1.526,379,1.832,380,3.361,381,3.361,382,1.832,383,1.832,384,1.526,385,2.965,386,2.399,387,2.399,388,2.399,389,2.083,390,2.399,391,2.917,392,4.207,393,2.917,394,3.361,395,2.399,396,2.399,397,2.965,398,3.361,399,3.361,400,1.846,401,3.361,402,2.083,403,2.399,404,2.399,405,2.083,406,2.399,407,2.083,408,2.399,409,2.399,410,2.399,411,2.399,412,2.399,413,2.399,414,2.399,415,2.399,416,2.399,417,2.399,418,2.399,419,2.399,420,2.399,421,2.88,422,1.526,423,1.526]],["title/injectables/CsrfMiddleware.html",[90,2.012,100,0.233]],["body/injectables/CsrfMiddleware.html",[3,0.366,4,0.311,5,0.311,7,0.545,8,1.019,11,4.05,13,0.033,15,0.751,17,0.993,18,0.751,19,0.907,20,2.687,21,0.827,23,0.595,25,0.482,28,0.366,29,0.311,36,1.288,38,0.027,39,0.027,68,0.751,90,3.312,94,2.687,100,0.383,101,1.182,124,4.871,144,4.228,151,2.687,424,3.492,425,5.167,426,5.167,427,5.847,428,5.847,429,4.192,430,5.167,431,3.492]],["title/interfaces/DeckDto.html",[329,1.806,432,2.269]],["body/interfaces/DeckDto.html",[3,0.385,4,0.327,5,0.327,7,0.573,13,0.033,18,1.065,22,1.915,23,0.507,28,0.385,38,0.027,39,0.027,68,1.025,329,2.536,330,3.813,331,3.187,333,2.308,335,3.098,339,2.982,349,3.423,432,3.853,433,3.672,434,4.408]],["title/controllers/HearthstoneController.html",[0,1.245,435,2.012]],["body/controllers/HearthstoneController.html",[0,0.922,2,0.922,3,0.203,4,0.172,5,0.172,7,0.302,8,0.681,12,2.683,13,0.034,15,1.028,17,1.212,18,0.974,19,1.107,20,3.129,21,1.116,23,0.526,24,1.337,25,0.268,28,0.203,29,0.172,30,1.007,33,1.156,36,1.708,38,0.018,39,0.018,109,1.681,112,1.786,123,3.129,128,1.956,142,1.681,143,1.936,145,2.215,147,1.337,149,1.936,157,1.403,165,1.337,174,1.49,175,1.007,179,1.681,182,2.499,192,3.805,195,1.936,238,3.088,266,1.007,290,1.8,335,1.211,349,2.628,350,3.129,366,1.337,373,1.49,400,2.215,435,2.215,436,1.936,437,1.681,438,3.456,439,2.879,440,3.805,441,3.456,442,4.567,443,4.567,444,4.567,445,3.456,446,3.456,447,3.456,448,2.324,449,2.324,450,2.324,451,2.324,452,2.324,453,2.324,454,2.324,455,2.324,456,2.324,457,3.456,458,2.324,459,3.436,460,3.456,461,2.324,462,2.324,463,2.324,464,3.456,465,2.324,466,2.324,467,3.456,468,2.324,469,4.567,470,2.324,471,3.456,472,2.324,473,2.324,474,3.456,475,2.324,476,2.324,477,1.936,478,1.936,479,1.8,480,1.936,481,1.936,482,2.324,483,2.324,484,2.324,485,2.324,486,2.324,487,2.324,488,2.324,489,3.456,490,2.324,491,2.324,492,2.324,493,2.324,494,2.324,495,2.324,496,2.324,497,1.936,498,2.324,499,2.324,500,2.324,501,2.324,502,2.324,503,2.324,504,2.324,505,2.324,506,2.324,507,2.324,508,2.324,509,2.324,510,2.324,511,2.324,512,2.324,513,2.324,514,1.936,515,2.324]],["title/injectables/HearthstoneDataCommand.html",[53,1.806,100,0.233]],["body/injectables/HearthstoneDataCommand.html",[3,0.11,4,0.094,5,0.094,7,0.164,8,0.42,12,0.599,13,0.034,15,0.701,18,0.972,21,0.544,23,0.372,25,0.146,28,0.11,29,0.094,33,1.521,36,0.388,38,0.011,39,0.011,53,1.225,55,0.912,68,0.494,77,0.548,78,1.862,85,0.502,100,0.158,101,0.357,112,1.282,157,1.773,175,0.922,223,2.251,226,1.195,228,1.436,234,1.109,269,0.914,272,0.914,273,0.914,333,0.922,334,3.875,335,1.109,337,3.548,338,2.339,341,3.009,342,3.579,343,2.695,346,0.914,348,1.54,349,1.225,350,1.365,356,0.914,357,1.053,358,0.811,359,0.811,360,0.811,361,0.914,362,1.053,363,1.053,364,1.053,365,0.914,366,1.225,370,1.774,372,1.053,373,0.811,374,3.26,375,0.811,377,2.829,378,1.053,380,1.774,381,1.774,384,1.053,385,2.297,386,1.774,387,1.774,388,1.774,389,1.54,390,1.774,391,2.339,392,3.966,393,2.339,394,2.695,395,1.774,396,1.774,397,1.774,398,1.774,399,2.695,400,1.365,401,2.695,402,1.54,403,1.774,404,1.774,405,1.54,406,1.774,407,1.54,408,1.774,409,1.774,410,1.774,411,1.774,412,1.774,413,1.774,414,1.774,415,1.774,416,1.774,417,1.774,418,1.774,419,1.774,420,2.695,422,3.916,423,1.053,431,1.053,437,1.54,516,1.053,517,3.235,518,2.129,519,2.129,520,1.774,521,1.264,522,1.264,523,1.264,524,1.264,525,1.264,526,0.914,527,1.264,528,1.264,529,1.264,530,1.264,531,1.264,532,4.548,533,1.264,534,5.3,535,5.3,536,5.367,537,1.264,538,1.264,539,1.264,540,1.264,541,1.264,542,1.264,543,1.264,544,1.264,545,1.264,546,1.264,547,1.264,548,1.264,549,1.264,550,1.264,551,2.758,552,1.264,553,1.264,554,1.264,555,2.129,556,2.129,557,1.774,558,2.129,559,1.774,560,2.129,561,2.129,562,2.129,563,1.774,564,1.264,565,1.264,566,2.129,567,2.129,568,2.129,569,1.264,570,1.264,571,2.129,572,2.129,573,2.129,574,2.129,575,1.264,576,3.61,577,2.129,578,2.339,579,2.129,580,3.008,581,2.129,582,2.129,583,1.264,584,1.264,585,1.774,586,2.129,587,2.129,588,2.129,589,1.264,590,2.129,591,1.264,592,2.129,593,1.264,594,1.264,595,1.264,596,1.264,597,0.914,598,2.129,599,1.264,600,1.264,601,1.264,602,1.264,603,1.264,604,2.129,605,2.129,606,1.264]],["title/modules/HearthstoneModule.html",[40,1.143,48,1.806]],["body/modules/HearthstoneModule.html",[2,2.033,3,0.361,4,0.307,5,0.307,13,0.033,23,0.688,25,0.476,28,0.361,29,0.307,38,0.026,39,0.026,40,1.866,42,1.791,43,2.219,48,3.592,55,1.719,58,2.669,59,2.154,60,2.154,62,2.948,85,1.641,435,3.569,479,3.174,480,3.445,607,3.445,608,3.445,609,4.135,610,2.38,611,4.135,612,4.135]],["title/injectables/HearthstoneService.html",[100,0.233,479,1.634]],["body/injectables/HearthstoneService.html",[3,0.107,4,0.091,5,0.091,7,0.159,8,0.408,13,0.034,15,0.927,17,1.1,18,1.021,19,1.005,21,0.986,22,1.552,23,0.408,24,0.704,25,0.141,28,0.107,29,0.235,30,0.53,33,1.672,36,1.536,38,0.011,39,0.011,55,0.893,68,0.927,85,0.485,100,0.154,101,0.345,112,1.702,121,1.068,128,1.679,145,1.327,157,1.426,165,0.704,168,0.485,169,0.53,174,0.784,175,0.897,179,0.885,217,1.019,223,1.549,226,0.53,228,1.402,234,2.134,238,2.244,249,1.822,266,0.53,290,2.418,291,1.019,301,3.452,319,1.019,333,0.897,334,2.27,335,0.637,336,0.885,337,2.03,339,2.932,341,2.962,342,1.725,349,3.063,350,2.465,358,0.784,359,0.784,360,0.784,361,0.885,365,0.885,366,2.038,373,3.062,375,1.327,377,1.946,389,1.946,391,2.962,392,2.561,393,1.497,400,2.626,402,1.946,405,0.885,407,3.115,439,2.242,440,1.725,459,1.725,479,1.078,481,3.204,526,0.885,559,1.019,563,1.019,578,1.946,580,1.019,597,1.497,613,1.019,614,2.07,615,2.07,616,3.167,617,3.167,618,2.692,619,3.167,620,2.07,621,2.07,622,3.167,623,2.07,624,2.07,625,1.019,626,2.07,627,2.07,628,1.223,629,3.542,630,1.223,631,1.223,632,2.07,633,1.223,634,2.951,635,2.07,636,1.223,637,1.223,638,1.223,639,1.223,640,3.542,641,3.167,642,1.223,643,3.167,644,1.223,645,2.07,646,1.223,647,2.07,648,3.542,649,1.223,650,1.223,651,2.07,652,2.692,653,1.223,654,2.07,655,2.692,656,1.223,657,1.223,658,2.07,659,1.019,660,1.223,661,2.07,662,1.223,663,1.223,664,2.692,665,2.692,666,1.223,667,2.692,668,2.07,669,1.223,670,3.167,671,2.692,672,2.07,673,1.725,674,2.07,675,3.846,676,4.097,677,2.07,678,2.07,679,2.07,680,3.167,681,1.223,682,1.223,683,2.07,684,1.223,685,1.223,686,1.223,687,1.223,688,1.223,689,2.692,690,2.07,691,1.223,692,2.692,693,1.019,694,1.223,695,2.07,696,1.223,697,2.07,698,1.223,699,1.497,700,1.223,701,1.223,702,2.07,703,1.223,704,1.223,705,1.223,706,1.223,707,1.223,708,1.223,709,1.223,710,1.223,711,2.07,712,1.223,713,1.223,714,1.223,715,2.07,716,1.223,717,1.223,718,1.223,719,1.223,720,1.223,721,2.07,722,1.223,723,2.07,724,1.223,725,2.07,726,1.223,727,1.223]],["title/injectables/JwtAuthGuard.html",[100,0.233,147,1.806]],["body/injectables/JwtAuthGuard.html",[3,0.329,4,0.28,5,0.28,7,0.49,8,0.953,13,0.033,15,0.866,17,1.145,18,0.866,19,1.046,21,0.953,23,0.614,25,0.434,28,0.329,29,0.28,33,1.261,36,1.485,38,0.025,39,0.025,68,0.866,94,2.417,100,0.359,101,1.063,112,1.505,121,2.402,128,1.788,147,2.782,157,1.158,206,2.417,215,4.959,228,1.964,238,2.518,242,3.238,728,4.445,729,3.141,730,4.834,731,4.834,732,4.834,733,5.627,734,3.771,735,3.141,736,4.834,737,3.771,738,3.771,739,3.771,740,4.834,741,2.727,742,3.771,743,3.771,744,3.771]],["title/injectables/JwtStrategy.html",[100,0.233,200,1.806]],["body/injectables/JwtStrategy.html",[3,0.307,4,0.261,5,0.261,7,0.456,8,0.91,13,0.034,15,0.827,17,1.094,18,0.827,19,0.999,21,0.693,22,1.175,23,0.655,25,0.404,28,0.307,29,0.261,30,1.522,31,2.926,33,1.175,36,1.584,38,0.024,39,0.024,57,1.953,68,0.981,83,2.021,100,0.343,101,0.991,112,1.454,121,1.832,128,1.665,144,3.729,148,2.251,151,2.251,157,1.079,165,2.021,168,1.394,200,2.656,206,2.251,210,2.926,224,3.846,226,1.522,249,2.656,287,2.926,290,2.404,298,3.846,299,2.54,339,2.686,741,2.54,745,2.926,746,2.926,747,3.512,748,4.616,749,3.512,750,3.512,751,3.512,752,3.512,753,3.512,754,2.926,755,3.512,756,3.512,757,3.512,758,3.512,759,3.512,760,3.512,761,3.512,762,3.512,763,3.512,764,3.512,765,4.616,766,3.512,767,3.512]],["title/modules/MailModule.html",[40,1.143,49,1.806]],["body/modules/MailModule.html",[3,0.321,4,0.273,5,0.273,13,0.034,23,0.681,25,0.424,28,0.321,29,0.273,38,0.024,39,0.024,40,1.733,42,1.594,43,2.062,49,3.404,54,2.562,58,2.479,59,1.917,60,1.917,62,2.739,63,2.661,77,2.285,97,3.066,110,3.066,121,1.461,175,2.285,301,2.359,308,3.066,768,3.68,769,3.68,770,3.68,771,3.68,772,3.68,773,2.661,774,4.759,775,3.68,776,3.066,777,4.759,778,3.68,779,3.68,780,4.759,781,3.68,782,3.68,783,3.68,784,3.68,785,3.68,786,3.68,787,3.68,788,3.68,789,3.68,790,3.68,791,3.68,792,3.066,793,3.68,794,3.68,795,3.68,796,3.68,797,3.68,798,3.68,799,3.68]],["title/injectables/MailService.html",[54,1.359,100,0.233]],["body/injectables/MailService.html",[3,0.327,4,0.278,5,0.278,7,0.488,8,0.95,13,0.034,15,0.863,17,1.141,18,0.863,19,1.043,21,0.74,23,0.613,25,0.432,28,0.327,29,0.278,30,1.625,38,0.025,39,0.025,54,2.087,68,0.863,77,1.625,100,0.358,101,1.058,112,1.501,121,1.912,157,1.153,168,1.489,169,1.625,226,1.625,242,3.232,261,3.126,266,1.625,299,2.713,316,3.126,735,3.126,773,2.713,792,3.126,800,3.126,801,4.819,802,3.752,803,5.946,804,3.752,805,4.819,806,3.752,807,3.752,808,3.752,809,2.713,810,3.752,811,3.752,812,3.752,813,3.752,814,3.752,815,3.752,816,2.713,817,3.752,818,3.752,819,3.752,820,3.752,821,3.752,822,3.752,823,3.752,824,3.752,825,3.752,826,3.752]],["title/injectables/PrismaService.html",[55,0.885,100,0.233]],["body/injectables/PrismaService.html",[3,0.352,4,0.3,5,0.3,7,0.525,8,0.996,13,0.033,15,0.904,17,0.956,18,0.723,19,0.874,21,0.996,23,0.581,25,0.465,28,0.352,29,0.3,38,0.026,39,0.026,55,1.424,68,0.723,94,2.588,100,0.375,101,1.139,112,1.733,157,1.551,266,1.749,741,3.65,816,2.92,827,3.364,828,5.507,829,5.048,830,6.059,831,5.048,832,5.77,833,4.038,834,4.038,835,4.038,836,4.038,837,4.038]],["title/controllers/UserController.html",[0,1.245,610,1.806]],["body/controllers/UserController.html",[0,1.384,2,1.384,3,0.304,4,0.259,5,0.259,7,0.453,8,0.906,12,2.59,13,0.034,15,0.978,17,1.089,18,0.823,19,0.995,21,1.077,22,1.949,23,0.592,25,0.402,28,0.304,29,0.259,30,1.511,36,1.072,38,0.024,39,0.024,57,1.719,68,0.978,109,2.523,112,1.449,121,1.824,123,2.236,142,2.523,157,1.072,168,1.384,169,1.511,170,2.007,216,3.323,238,2.394,242,2.007,249,2.645,266,1.511,290,2.394,477,2.906,478,2.906,610,2.645,838,2.906,839,5.463,840,5.463,841,4.596,842,4.596,843,3.489,844,5.139,845,4.596,846,3.489,847,3.489,848,4.596,849,3.489,850,4.596,851,3.489,852,4.596,853,3.489,854,2.906,855,3.489,856,3.489,857,3.489,858,3.489,859,3.489]],["title/injectables/UserCreateCommand.html",[56,1.806,100,0.233]],["body/injectables/UserCreateCommand.html",[3,0.297,4,0.253,5,0.253,7,0.442,8,0.892,12,1.614,13,0.033,15,0.81,17,1.071,18,1.008,19,0.979,21,0.671,22,2.082,23,0.623,25,0.392,28,0.297,29,0.253,33,1.138,38,0.023,39,0.023,51,2.559,56,2.602,57,1.936,68,1.008,77,1.474,78,3.113,83,1.959,84,2.836,100,0.335,101,0.96,112,1.432,157,1.045,168,2.235,169,2.343,170,3.331,171,2.461,182,2.461,223,2.602,226,1.959,234,2.355,301,2.898,305,2.836,342,3.255,346,2.461,348,3.27,356,3.912,437,3.27,497,2.836,520,3.767,746,2.836,860,2.836,861,3.404,862,3.404,863,4.522,864,3.404,865,3.404,866,3.404]],["title/classes/UserDto.html",[29,0.233,133,2.012]],["body/classes/UserDto.html",[3,0.371,4,0.315,5,0.315,7,0.552,13,0.033,15,1.079,22,2.098,28,0.371,29,0.315,38,0.027,39,0.027,68,1.079,133,3.34,168,2.236,169,2.441,170,3.243,171,4.075,172,4.694,247,4.341,333,2.257,514,3.54,867,3.54,868,4.249,869,4.249,870,4.249,871,4.249,872,4.249]],["title/modules/UserModule.html",[40,1.143,50,1.634]],["body/modules/UserModule.html",[2,2.05,3,0.366,4,0.311,5,0.311,13,0.033,23,0.673,25,0.482,28,0.366,29,0.311,38,0.027,39,0.027,40,1.881,42,1.816,43,2.238,50,3.26,55,1.724,57,2.045,58,2.691,59,2.183,60,2.183,62,2.973,85,1.663,610,3.223,854,3.492,873,4.192,874,4.192,875,4.192,876,4.192]],["title/injectables/UserService.html",[57,1.049,100,0.233]],["body/injectables/UserService.html",[3,0.276,4,0.235,5,0.235,7,0.411,8,0.849,13,0.034,15,0.984,17,1.301,18,0.984,19,1.189,21,1.036,22,1.637,23,0.563,25,0.364,28,0.276,29,0.235,30,1.371,33,1.059,36,1.503,38,0.022,39,0.022,55,1.481,57,1.44,68,1.071,85,1.256,100,0.32,101,0.893,112,1.736,117,2.289,121,1.256,128,1.501,168,1.256,169,1.371,216,3.114,226,1.371,228,2.549,231,3.588,232,4.077,234,2.862,238,2.736,242,1.822,249,3.023,266,1.371,289,2.637,290,1.649,339,1.649,625,2.637,634,4.376,877,2.637,878,4.306,879,4.306,880,4.306,881,3.166,882,3.166,883,4.306,884,5.253,885,3.166,886,4.306,887,3.166,888,4.306,889,3.166,890,3.166,891,3.166,892,3.166,893,3.166,894,3.166,895,3.166,896,3.166,897,3.166,898,3.166]],["title/coverage.html",[899,3.096]],["body/coverage.html",[0,2.172,1,2.246,5,0.26,6,2.919,13,0.033,26,1.825,29,0.26,38,0.024,39,0.024,51,1.518,52,2.017,53,2.017,54,1.518,55,0.988,56,2.017,57,1.172,68,0.627,90,2.246,100,0.464,102,2.919,107,2.246,108,2.919,133,2.246,147,2.017,175,1.518,200,2.017,214,2.919,329,2.652,330,2.246,332,2.919,340,2.919,424,2.919,432,2.534,433,2.919,435,2.246,436,2.919,479,1.825,516,2.919,578,4.664,610,2.017,613,2.919,728,2.919,729,2.919,745,2.919,800,2.919,827,2.919,838,2.919,860,2.919,867,2.919,877,2.919,899,2.534,900,3.504,901,3.504,902,3.504,903,5.151,904,5.151,905,3.504,906,5.685,907,2.919,908,4.61,909,3.84,910,4.61,911,5.151,912,3.504,913,3.504,914,3.504,915,2.919,916,3.504,917,3.504,918,3.504]],["title/dependencies.html",[43,1.635,919,2.184]],["body/dependencies.html",[13,0.034,25,0.431,38,0.025,39,0.025,43,1.621,75,3.118,77,2.303,78,2.154,88,2.399,127,2.707,148,3.084,151,3.084,152,2.707,154,3.118,206,2.399,264,3.118,265,3.118,266,1.621,358,2.399,359,2.399,360,2.399,526,2.707,659,3.118,754,4.43,773,2.707,920,3.743,921,5.612,922,3.743,923,3.743,924,3.743,925,3.743,926,3.743,927,3.743,928,3.743,929,3.743,930,3.743,931,3.743,932,3.743,933,3.743,934,3.743,935,3.743,936,3.743,937,3.743,938,3.743,939,3.743,940,3.743,941,3.743,942,3.743,943,3.743,944,3.743,945,3.743,946,3.743,947,3.743,948,3.743,949,3.743,950,3.743,951,3.743,952,3.743,953,3.743,954,3.743,955,3.743,956,3.743,957,3.743,958,3.743,959,3.743,960,3.743,961,3.743,962,3.743,963,3.743,964,3.743,965,3.743]],["title/miscellaneous/functions.html",[966,2.184,967,3.144]],["body/miscellaneous/functions.html",[7,0.633,13,0.029,38,0.029,39,0.029,907,4.055,909,5.272,915,4.055,966,4.055,967,4.055,968,4.868,969,4.868]],["title/index.html",[7,0.341,970,2.622,971,2.622]],["body/index.html",[4,0.289,13,0.033,38,0.025,39,0.025,585,4.111,673,4.111,693,3.245,699,2.816,776,3.245,809,2.816,816,2.816,899,2.816,972,3.895,973,3.895,974,4.935,975,3.895,976,3.895,977,3.895,978,3.895,979,3.895,980,3.895,981,3.245,982,5.417,983,3.895,984,3.895,985,3.895,986,3.895,987,6.098,988,3.895,989,3.895,990,6.003,991,3.895,992,3.895,993,3.895,994,3.895,995,3.895,996,3.895,997,4.935,998,3.895,999,3.895,1000,3.895,1001,4.935,1002,4.935,1003,3.895,1004,3.895,1005,3.895,1006,3.895,1007,3.895,1008,3.895,1009,3.895,1010,3.895,1011,3.895,1012,3.895,1013,3.895,1014,3.895,1015,3.895,1016,3.895,1017,3.895,1018,3.895,1019,3.895,1020,3.895,1021,3.895,1022,3.245]],["title/modules.html",[42,1.854]],["body/modules.html",[13,0.028,38,0.028,39,0.028,41,2.997,42,2.025,47,2.69,48,2.69,49,2.69,50,2.435,557,5.155,809,4.475,1023,6.188,1024,6.188]],["title/overview.html",[1025,3.566]],["body/overview.html",[2,1.339,13,0.033,26,2.633,29,0.25,38,0.023,39,0.023,41,4.156,42,1.462,43,1.947,44,2.811,45,2.811,46,2.811,47,3.647,48,3.392,49,3.231,50,3.119,51,2.594,52,2.909,53,2.909,54,2.432,55,1.628,56,2.909,57,1.878,58,2.341,59,1.757,60,1.757,101,0.951,196,2.811,198,2.811,199,2.811,200,2.909,331,2.44,366,1.941,375,2.163,479,2.633,597,2.44,607,2.811,608,2.811,1025,2.811,1026,3.374,1027,3.374]],["title/properties.html",[333,1.635,919,2.184]],["body/properties.html",[13,0.033,38,0.029,39,0.029,333,2.122,699,3.542,981,4.081,1022,4.081,1028,4.899,1029,4.899,1030,4.899]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":578,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1029,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":910,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":905,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":906,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":916,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":911,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":904,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":366,"title":{},"body":{"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"overview.html":{}}}],["1.0.1",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["1.0.5",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["1.11.2",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["1.6.1",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["100000",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["12",{"_index":375,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"overview.html":{}}}],["16",{"_index":496,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["17.4.1",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":597,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"overview.html":{}}}],["2.0.0",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["2.2.1",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["3.1.7",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["3.13.0",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["36",{"_index":491,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["4",{"_index":1027,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1026,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["587",{"_index":783,"title":{},"body":{"modules/MailModule.html":{}}}],["6.7.5",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["8.0.0",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["999999",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["adapter",{"_index":796,"title":{},"body":{"modules/MailModule.html":{}}}],["add/update",{"_index":520,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{}}}],["addcardintodeck",{"_index":438,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["addcardintodeck(@req",{"_index":508,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["addcardintodeck(req",{"_index":448,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["addcardtodeck",{"_index":614,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["addcardtodeck(deckid",{"_index":627,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["already",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1008,"title":{},"body":{"index.html":{}}}],["api",{"_index":359,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"dependencies.html":{}}}],["app",{"_index":816,"title":{},"body":{"injectables/MailService.html":{},"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":837,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appended",{"_index":821,"title":{},"body":{"injectables/MailService.html":{}}}],["applications",{"_index":980,"title":{},"body":{"index.html":{}}}],["apply(csrfmiddleware",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":41,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":26,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["artistname",{"_index":409,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["asc",{"_index":680,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["async",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["attack",{"_index":405,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"modules/MailModule.html":{}}}],["auth.controller",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{}}}],["auth.guard.ts",{"_index":729,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":734,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":737,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserCreateCommand.html":{}}}],["auth/jwt",{"_index":484,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["authcontroller",{"_index":107,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":739,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":47,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":699,"title":{},"body":{"injectables/HearthstoneService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":707,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["authservice",{"_index":51,"title":{"injectables/AuthService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserCreateCommand.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":822,"title":{},"body":{"injectables/MailService.html":{}}}],["await",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{}}}],["backers",{"_index":1009,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(password",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensaltsync(10",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync(password",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["blizzard",{"_index":358,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"dependencies.html":{}}}],["blizzard:hearthstone:cards",{"_index":347,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["blizzard:hearthstone:metadata",{"_index":519,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["blizzard_id",{"_index":334,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["blizzardapi",{"_index":341,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["body",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}}}],["body('cards",{"_index":499,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["body.cards",{"_index":511,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["body.code",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.email",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserDto.html":{}}}],["bootstrap",{"_index":909,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["brackets",{"_index":825,"title":{},"body":{"injectables/MailService.html":{}}}],["browse",{"_index":1024,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1023,"title":{},"body":{"modules.html":{}}}],["building",{"_index":975,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":730,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":732,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["card",{"_index":373,"title":{},"body":{"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["card.artistname",{"_index":410,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.attack",{"_index":406,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.blizzard_id",{"_index":686,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["card.card",{"_index":712,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["card.card.rarity.craftingcost[0",{"_index":726,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["card.cardsetid",{"_index":374,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.cardtypeid",{"_index":399,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.classid",{"_index":393,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["card.cropimage",{"_index":417,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.dto",{"_index":434,"title":{},"body":{"interfaces/DeckDto.html":{}}}],["card.flavortext",{"_index":419,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.health",{"_index":404,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.id",{"_index":385,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.image",{"_index":413,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.imagegold",{"_index":415,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.keywordids",{"_index":604,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["card.keywordids.map((keywordid",{"_index":605,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["card.manacost",{"_index":408,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.miniontypeid",{"_index":394,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.multiclassids",{"_index":388,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.multiclassids.map((classid",{"_index":390,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.name",{"_index":387,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.nb",{"_index":692,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["card.rarityid",{"_index":401,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.slug",{"_index":386,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.spellschool",{"_index":396,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.spellschoolid",{"_index":398,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card.text",{"_index":411,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["card?.keywordids?.map((keywordid",{"_index":602,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["card?.keywordids?.map(async",{"_index":379,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["cardclass",{"_index":489,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["cardclassslug",{"_index":641,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["carddto",{"_index":330,"title":{"interfaces/CardDto.html":{}},"body":{"interfaces/CardDto.html":{},"interfaces/DeckDto.html":{},"coverage.html":{}}}],["cardmodel",{"_index":483,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["cards",{"_index":349,"title":{},"body":{"injectables/CreateCardCommand.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["cards.concat(cardstmp.cards",{"_index":600,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["cards.map((card",{"_index":685,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["cards.map((item",{"_index":713,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["cards.map(async",{"_index":372,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["cardset",{"_index":377,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["cardsets",{"_index":551,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["cardstmp",{"_index":599,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["cardtype",{"_index":400,"title":{},"body":{"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["cardtypeid",{"_index":663,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["catch",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["changeavatar",{"_index":839,"title":{},"body":{"controllers/UserController.html":{}}}],["changepassword",{"_index":840,"title":{},"body":{"controllers/UserController.html":{}}}],["class",{"_index":29,"title":{"classes/UserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":514,"title":{},"body":{"controllers/HearthstoneController.html":{},"classes/UserDto.html":{}}}],["classid",{"_index":335,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["classslug",{"_index":459,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["cluster_appmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_hearthstonemodule",{"_index":607,"title":{},"body":{"modules/HearthstoneModule.html":{},"overview.html":{}}}],["cluster_hearthstonemodule_providers",{"_index":608,"title":{},"body":{"modules/HearthstoneModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":768,"title":{},"body":{"modules/MailModule.html":{}}}],["cluster_mailmodule_providers",{"_index":769,"title":{},"body":{"modules/MailModule.html":{}}}],["cluster_usermodule",{"_index":873,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":874,"title":{},"body":{"modules/UserModule.html":{}}}],["code",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["collectiblecount",{"_index":542,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["collectiblerevealedcount",{"_index":544,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["command",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{},"dependencies.html":{}}}],["command({command",{"_index":346,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{}}}],["command/hs.cards.command",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["command/hs.data.command",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["command/user.create.command",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["commandmodule",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["confirm",{"_index":817,"title":{},"body":{"injectables/MailService.html":{}}}],["confirmpassword",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserDto.html":{}}}],["connect",{"_index":392,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["connectorcreate",{"_index":606,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["console.log('test",{"_index":431,"title":{},"body":{"injectables/CsrfMiddleware.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["console.log(`get",{"_index":367,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["console.log(body",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(cardstmp.page",{"_index":601,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["console.log(classslug",{"_index":500,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["console.log(e",{"_index":423,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["console.log(keywordid",{"_index":603,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["console.log(metadata",{"_index":701,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["console.log(payload",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log(query",{"_index":488,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["console.log(req.user",{"_index":509,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["console.log(result",{"_index":497,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/UserCreateCommand.html":{}}}],["console.log(str",{"_index":529,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["console.table(metadata[str",{"_index":530,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["const",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["constructor(mailerservice",{"_index":802,"title":{},"body":{"injectables/MailService.html":{}}}],["constructor(prisma",{"_index":625,"title":{},"body":{"injectables/HearthstoneService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":746,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserCreateCommand.html":{}}}],["constructor(usersservice",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":672,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["content",{"_index":826,"title":{},"body":{"injectables/MailService.html":{}}}],["context",{"_index":735,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{}}}],["context.switchtohttp().getrequest",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('hearthstone",{"_index":485,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["controller('user",{"_index":855,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HearthstoneController.html":{},"modules/HearthstoneModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["cookiecombo",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["cost",{"_index":725,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["cost?.[0",{"_index":727,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["count",{"_index":670,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["coverage",{"_index":899,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["craftingcost",{"_index":580,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["create",{"_index":342,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/UserCreateCommand.html":{}}}],["create(email",{"_index":862,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["create(page",{"_index":345,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["createcardcommand",{"_index":52,"title":{"injectables/CreateCardCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/CreateCardCommand.html":{},"coverage.html":{},"overview.html":{}}}],["createcards",{"_index":690,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["createdeck",{"_index":439,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["createdeck(@req",{"_index":505,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["createdeck(data",{"_index":630,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["createdeck(req",{"_index":451,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["creategamemoderelation",{"_index":592,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["createuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createuser(@body",{"_index":858,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser(data",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["createuser(userdata",{"_index":847,"title":{},"body":{"controllers/UserController.html":{}}}],["cropimage",{"_index":416,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["csrf",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["csrfmiddleware",{"_index":90,"title":{"injectables/CsrfMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/CsrfMiddleware.html":{},"coverage.html":{}}}],["csurf",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["curly",{"_index":824,"title":{},"body":{"injectables/MailService.html":{}}}],["data",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["data.cards.map((card",{"_index":691,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["data.classslug",{"_index":688,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["data.deckname",{"_index":698,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["data.password",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.verificationcode",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["database",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["dayjs",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["dayjs().add(7",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["dayjs().todate",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["days').todate",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["deck",{"_index":481,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["deck.authorid",{"_index":708,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deck.cards.map((card",{"_index":711,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deck.class",{"_index":710,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deck.classid",{"_index":709,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deck.name",{"_index":706,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deckdefinition",{"_index":658,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deckdto",{"_index":432,"title":{"interfaces/DeckDto.html":{}},"body":{"interfaces/DeckDto.html":{},"coverage.html":{}}}],["deckid",{"_index":629,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deckmodel",{"_index":482,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["decks",{"_index":721,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["decks.map((deck",{"_index":724,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deckstrings",{"_index":659,"title":{},"body":{"injectables/HearthstoneService.html":{},"dependencies.html":{}}}],["deckwithcost",{"_index":723,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["decode",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{}}}],["decode(token",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoded.id",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["decoding",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["decorators",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{}}}],["default",{"_index":812,"title":{},"body":{"injectables/MailService.html":{}}}],["defaults",{"_index":790,"title":{},"body":{"modules/MailModule.html":{}}}],["defined",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":476,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["delete('deck/:id",{"_index":513,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["delete('deck/cards/:id",{"_index":512,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["deletedeck",{"_index":440,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["deletedeck(params",{"_index":632,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deletemany",{"_index":684,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["deleteuser",{"_index":878,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(where",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":43,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["describe",{"_index":348,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{}}}],["description",{"_index":981,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":989,"title":{},"body":{"index.html":{}}}],["dir",{"_index":793,"title":{},"body":{"modules/MailModule.html":{}}}],["documentation",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["dustvalue",{"_index":576,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["e",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["e2e",{"_index":998,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":976,"title":{},"body":{"index.html":{}}}],["ejs",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["ejsadapter",{"_index":777,"title":{},"body":{"modules/MailModule.html":{}}}],["email",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["enableshutdownhooks",{"_index":829,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":831,"title":{},"body":{"injectables/PrismaService.html":{}}}],["encode",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{}}}],["encode(deck",{"_index":719,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["encodedeck",{"_index":615,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["encodedeck(classslug",{"_index":635,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["encodepassword",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["encodepassword(password",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":738,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":733,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exist",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["exp",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expires",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["expiresin",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CsrfMiddleware.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["extends",{"_index":741,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{}}}],["extension",{"_index":820,"title":{},"body":{"injectables/MailService.html":{}}}],["extractjwt",{"_index":752,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":759,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filling",{"_index":823,"title":{},"body":{"injectables/MailService.html":{}}}],["filters",{"_index":665,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["findone",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["findone(params",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["firstpage",{"_index":595,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["firstpage.cards",{"_index":596,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["firstpage.pagecount",{"_index":598,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["flavortext",{"_index":418,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["forbidden",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["format",{"_index":718,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["formattype",{"_index":657,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["forroutes",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":974,"title":{},"body":{"index.html":{}}}],["function",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":967,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gamemode",{"_index":587,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["gamemodeid",{"_index":588,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["gamemodes",{"_index":590,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["generate",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatedeckcode",{"_index":441,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["generatedeckcode(@body('classslug",{"_index":498,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["generatedeckcode(classslug",{"_index":456,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["generatetoken",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetoken(user",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":852,"title":{},"body":{"controllers/UserController.html":{}}}],["get('cards",{"_index":467,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["get('classes",{"_index":460,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["get('csrf",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["get('deck/:id",{"_index":471,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["get('decks",{"_index":474,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["get('logout",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('metadata",{"_index":464,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["get('user",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["getallcards",{"_index":616,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getalldecks",{"_index":617,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getallhsclasses",{"_index":442,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["getandsaveallmetadata",{"_index":517,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["getcards",{"_index":618,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getcards(page",{"_index":639,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getclasses",{"_index":619,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getcsrftoken",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getcsrftoken(@req",{"_index":32,"title":{},"body":{"controllers/AppController.html":{}}}],["getcsrftoken(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getdeck",{"_index":620,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getdeck(id",{"_index":645,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getdeckpagination",{"_index":621,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["getdeckpagination(page",{"_index":647,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["gethello",{"_index":103,"title":{},"body":{"injectables/AppService.html":{}}}],["getting",{"_index":970,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":841,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(@param('id",{"_index":856,"title":{},"body":{"controllers/UserController.html":{}}}],["getuser(id",{"_index":851,"title":{},"body":{"controllers/UserController.html":{}}}],["getuserinfo",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserinfo(@request",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["getuserinfo(req",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["grow",{"_index":1005,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["handlebarsadapter",{"_index":774,"title":{},"body":{"modules/MailModule.html":{}}}],["handlerequest",{"_index":731,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":736,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hbs",{"_index":819,"title":{},"body":{"injectables/MailService.html":{}}}],["health",{"_index":403,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["hearthstone",{"_index":437,"title":{},"body":{"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{}}}],["hearthstone.controller",{"_index":612,"title":{},"body":{"modules/HearthstoneModule.html":{}}}],["hearthstone.service",{"_index":480,"title":{},"body":{"controllers/HearthstoneController.html":{},"modules/HearthstoneModule.html":{}}}],["hearthstone/hearthstone.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["hearthstonecontroller",{"_index":435,"title":{"controllers/HearthstoneController.html":{}},"body":{"controllers/HearthstoneController.html":{},"modules/HearthstoneModule.html":{},"coverage.html":{}}}],["hearthstonedatacommand",{"_index":53,"title":{"injectables/HearthstoneDataCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/HearthstoneDataCommand.html":{},"coverage.html":{},"overview.html":{}}}],["hearthstonemodule",{"_index":48,"title":{"modules/HearthstoneModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HearthstoneModule.html":{},"modules.html":{},"overview.html":{}}}],["hearthstoneservice",{"_index":479,"title":{"injectables/HearthstoneService.html":{}},"body":{"controllers/HearthstoneController.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"coverage.html":{},"overview.html":{}}}],["hello",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1013,"title":{},"body":{"index.html":{}}}],["herocardid",{"_index":571,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["heroes",{"_index":716,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["host",{"_index":784,"title":{},"body":{"modules/MailModule.html":{}}}],["hsclass",{"_index":391,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["hsclass.blizzard_id",{"_index":695,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["hsclass.herocardid",{"_index":717,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["hsclass?.blizzard_id",{"_index":668,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["hsclassid",{"_index":667,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["hsservice",{"_index":486,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["httpexception",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["httpexception('forbidden",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('invalid",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('problem",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('username",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception(result.message",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1019,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["httpstatus.bad_gateway",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.bad_request",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["httpstatus.conflict",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["httpstatus.forbidden",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.unauthorized",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["iat",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["iauthguard",{"_index":740,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["icon",{"_index":561,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["id",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identical",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":412,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["imagegold",{"_index":414,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["implements",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/CsrfMiddleware.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PrismaService.html":{}}}],["import",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{}}}],["include",{"_index":675,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["inestapplication",{"_index":832,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["initcardscollection",{"_index":343,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["initcardscollection(pagenb",{"_index":352,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["inject",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":100,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":101,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["insensitive",{"_index":674,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["installation",{"_index":986,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":988,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["interface",{"_index":329,"title":{"interfaces/CardDto.html":{},"interfaces/DeckDto.html":{}},"body":{"interfaces/CardDto.html":{},"interfaces/DeckDto.html":{},"coverage.html":{}}}],["interfaces",{"_index":331,"title":{},"body":{"interfaces/CardDto.html":{},"interfaces/DeckDto.html":{},"overview.html":{}}}],["invalid",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["ip",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["ipslogged",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispasswordvalid",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["ispasswordvalid(password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["item",{"_index":532,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.blizzard_id",{"_index":714,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["item.cardid",{"_index":572,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.cardsets?.map((setslug",{"_index":552,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.collectiblecount",{"_index":543,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.collectiblerevealedcount",{"_index":545,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.craftingcost[0",{"_index":581,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.craftingcost[1",{"_index":582,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.dustvalue[0",{"_index":577,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.dustvalue[1",{"_index":579,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.gamemodes?.map((gamemodeid",{"_index":586,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.heropowercardid",{"_index":574,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.icon",{"_index":562,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.id",{"_index":534,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.name",{"_index":535,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.nb",{"_index":715,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["item.noncollectiblecount",{"_index":547,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.noncollectiblerevealedcount",{"_index":549,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.reftext",{"_index":568,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.slug",{"_index":536,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.standard",{"_index":560,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.svg",{"_index":558,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.text",{"_index":566,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.type",{"_index":541,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["item.year",{"_index":556,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["join",{"_index":776,"title":{},"body":{"modules/MailModule.html":{},"index.html":{}}}],["jwt",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":147,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":200,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1016,"title":{},"body":{"index.html":{}}}],["keyword",{"_index":381,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["keywordcards",{"_index":420,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["keywordid",{"_index":380,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["keywordids",{"_index":376,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["keywordids.map((keywordid",{"_index":421,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["keywordids.push(keyword.blizzard_id",{"_index":383,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["lastloginat",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":1022,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1002,"title":{},"body":{"index.html":{}}}],["literal",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["login",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@realip",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(ip",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["mail.service",{"_index":771,"title":{},"body":{"modules/MailModule.html":{}}}],["mail/mail.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["mail/mail.service",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["mailer",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailermodule",{"_index":772,"title":{},"body":{"modules/MailModule.html":{}}}],["mailermodule.forroot",{"_index":779,"title":{},"body":{"modules/MailModule.html":{}}}],["mailerservice",{"_index":803,"title":{},"body":{"injectables/MailService.html":{}}}],["mailmodule",{"_index":49,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":54,"title":{"injectables/MailService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["manacost",{"_index":407,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["matching",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["math.floor",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["math.random",{"_index":893,"title":{},"body":{"injectables/UserService.html":{}}}],["message",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":526,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"dependencies.html":{}}}],["metadata['classes'].map(async",{"_index":569,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['gamemodes'].map(async",{"_index":531,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['keywords'].map(async",{"_index":564,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['miniontypes'].map(async",{"_index":591,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['rarities'].map(async",{"_index":575,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['setgroups'].map(async",{"_index":550,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['sets'].map(async",{"_index":539,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['spellschools'].map(async",{"_index":537,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["metadata['types'].map(async",{"_index":584,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["method",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["middleware/csrf.middleware",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["middlewareconsumer",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["miniontype",{"_index":395,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["miscellaneous",{"_index":966,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":1001,"title":{},"body":{"index.html":{}}}],["mode",{"_index":673,"title":{},"body":{"injectables/HearthstoneService.html":{},"index.html":{}}}],["module",{"_index":40,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":42,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":773,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{},"dependencies.html":{}}}],["modules/mailer/dist/adapters/ejs.adapter",{"_index":778,"title":{},"body":{"modules/MailModule.html":{}}}],["modules/mailer/dist/adapters/handlebars.adapter",{"_index":775,"title":{},"body":{"modules/MailModule.html":{}}}],["more",{"_index":693,"title":{},"body":{"injectables/HearthstoneService.html":{},"index.html":{}}}],["multihsclass",{"_index":389,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["myśliwiec",{"_index":1017,"title":{},"body":{"index.html":{}}}],["name",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["nb",{"_index":336,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneService.html":{}}}],["nbcards",{"_index":689,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["nbitem",{"_index":648,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["nbperpage",{"_index":640,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["nest",{"_index":982,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1021,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/UserCreateCommand.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["nestmiddleware",{"_index":430,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["nestmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"modules/MailModule.html":{},"coverage.html":{}}}],["next",{"_index":427,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["nextfunction",{"_index":428,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["nice",{"_index":815,"title":{},"body":{"injectables/MailService.html":{}}}],["node.js",{"_index":973,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["noncollectiblecount",{"_index":546,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["noncollectiblerevealedcount",{"_index":548,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["none",{"_index":669,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["npm",{"_index":987,"title":{},"body":{"index.html":{}}}],["null",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{}}}],["number",{"_index":339,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"interfaces/DeckDto.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["number(card.blizzard_id",{"_index":696,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["number(cardtype",{"_index":492,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["number(page",{"_index":495,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["object.getownpropertynames(metadata).map((str",{"_index":528,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["onmoduleinit",{"_index":830,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":1003,"title":{},"body":{"index.html":{}}}],["option",{"_index":357,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["optional",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["optionalsearch",{"_index":662,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["options",{"_index":798,"title":{},"body":{"modules/MailModule.html":{}}}],["orderby",{"_index":679,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["out",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["override",{"_index":811,"title":{},"body":{"injectables/MailService.html":{}}}],["overview",{"_index":1025,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p56ua6xrmrq5auvh4y",{"_index":789,"title":{},"body":{"modules/MailModule.html":{}}}],["package",{"_index":919,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":350,"title":{},"body":{"injectables/CreateCardCommand.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["page.cards",{"_index":371,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["pagenb",{"_index":354,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["pages",{"_index":368,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["param",{"_index":477,"title":{},"body":{"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["params",{"_index":634,"title":{},"body":{"injectables/HearthstoneService.html":{},"injectables/UserService.html":{}}}],["parser",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":788,"title":{},"body":{"modules/MailModule.html":{}}}],["passport",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{}}}],["passwords",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/MailModule.html":{}}}],["payload",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":1011,"title":{},"body":{"index.html":{}}}],["port",{"_index":782,"title":{},"body":{"modules/MailModule.html":{}}}],["positional",{"_index":356,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/UserCreateCommand.html":{}}}],["post",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}}}],["post('code",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":848,"title":{},"body":{"controllers/UserController.html":{}}}],["post('deck",{"_index":504,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["post('encode",{"_index":457,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["post('login",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('send_code",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["powercardid",{"_index":573,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["prefix",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}}}],["prisma",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UserService.html":{}}}],["prisma.cardcreatemanyinput",{"_index":652,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["prisma.deckcreatemanyinput",{"_index":655,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["prisma.prismaclientknownrequesterror",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma.service",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["prisma.usercreateinput",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["prisma.userupdateinput",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma.userwhereuniqueinput",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["prisma/client",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":828,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":55,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/PrismaService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/UserCreateCommand.html":{}}}],["process.cwd",{"_index":794,"title":{},"body":{"modules/MailModule.html":{}}}],["process.env.blizzard_api_key",{"_index":364,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["process.env.blizzard_api_secret",{"_index":365,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["process.env.jwt_secret",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":994,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":972,"title":{},"body":{"index.html":{}}}],["project",{"_index":1004,"title":{},"body":{"index.html":{}}}],["promise",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":333,"title":{"properties.html":{}},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"interfaces/DeckDto.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"classes/UserDto.html":{},"properties.html":{}}}],["providers",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{}}}],["pugadapter",{"_index":797,"title":{},"body":{"modules/MailModule.html":{}}}],["push",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["put",{"_index":478,"title":{},"body":{"controllers/HearthstoneController.html":{},"controllers/UserController.html":{}}}],["put('avatar",{"_index":842,"title":{},"body":{"controllers/UserController.html":{}}}],["put('deck/cards",{"_index":507,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["put('password",{"_index":845,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":469,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["rarity",{"_index":402,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["rarityid",{"_index":681,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["read",{"_index":1012,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{}}}],["real",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["realip",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["reflect",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["refresh(user",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["reftext",{"_index":567,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["register",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(body",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["removecardfromdeck",{"_index":622,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["removecardintodeck",{"_index":443,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["reply",{"_index":791,"title":{},"body":{"modules/MailModule.html":{}}}],["repository",{"_index":985,"title":{},"body":{"index.html":{}}}],["req",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{}}}],["req.csrftoken",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{}}}],["request",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CsrfMiddleware.html":{},"injectables/JwtStrategy.html":{}}}],["request?.cookies?.authentication",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["requestmethod",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/CsrfMiddleware.html":{}}}],["res.cookie('authentication",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(200).json",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["reset",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CsrfMiddleware.html":{}}}],["result",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{},"injectables/UserCreateCommand.html":{}}}],["result.error",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["result.message",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["results",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":990,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["rylan.crist12@ethereal.email",{"_index":787,"title":{},"body":{"modules/MailModule.html":{}}}],["salt",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["same",{"_index":694,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["sample",{"_index":360,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"dependencies.html":{}}}],["savecards",{"_index":623,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["savecards(params",{"_index":651,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["savedecks",{"_index":624,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["savedecks(params",{"_index":654,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["savemetadata",{"_index":444,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["scalable",{"_index":977,"title":{},"body":{"index.html":{}}}],["secret",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":786,"title":{},"body":{"modules/MailModule.html":{}}}],["select",{"_index":676,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["send",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendnewverificationcode",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendnewverificationcode(@body",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendnewverificationcode(body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["senduserconfirmation",{"_index":801,"title":{},"body":{"injectables/MailService.html":{}}}],["senduserconfirmation(user",{"_index":805,"title":{},"body":{"injectables/MailService.html":{}}}],["sendverificationcode",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendverificationcode(email",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":978,"title":{},"body":{"index.html":{}}}],["setgroupcards",{"_index":563,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["setgroupslug",{"_index":666,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["setslug",{"_index":553,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["showcards",{"_index":445,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showcards(@query",{"_index":487,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showcards(query",{"_index":466,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeck",{"_index":446,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeck(@param('id",{"_index":502,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeck(id",{"_index":470,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeckspage",{"_index":447,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeckspage(@query('page",{"_index":493,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["showdeckspage(page",{"_index":473,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["side",{"_index":979,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["skip",{"_index":677,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["slug",{"_index":337,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["smtp.ethereal.email",{"_index":785,"title":{},"body":{"modules/MailModule.html":{}}}],["smtps://user@example.com:topsecret@smtp.example.com",{"_index":781,"title":{},"body":{"modules/MailModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneDataCommand.html":{},"modules/HearthstoneModule.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["spellschool",{"_index":397,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["sponsors",{"_index":1007,"title":{},"body":{"index.html":{}}}],["src/.../cli.ts",{"_index":968,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:48",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:65",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:108",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:113",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:120",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:136",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:16",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:72",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:93",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:98",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":728,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":745,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/cli.ts",{"_index":907,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/command/hs.cards.command.ts",{"_index":340,"title":{},"body":{"injectables/CreateCardCommand.html":{},"coverage.html":{}}}],["src/command/hs.cards.command.ts:20",{"_index":351,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["src/command/hs.cards.command.ts:41",{"_index":353,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["src/command/hs.cards.command.ts:8",{"_index":355,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["src/command/hs.cards.command.ts:9",{"_index":344,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["src/command/hs.data.command.ts",{"_index":516,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"coverage.html":{}}}],["src/command/hs.data.command.ts:19",{"_index":521,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["src/command/hs.data.command.ts:230",{"_index":523,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["src/command/hs.data.command.ts:28",{"_index":522,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["src/command/hs.data.command.ts:8",{"_index":524,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["src/command/hs.data.command.ts:9",{"_index":518,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["src/command/user.create.command.ts",{"_index":860,"title":{},"body":{"injectables/UserCreateCommand.html":{},"coverage.html":{}}}],["src/command/user.create.command.ts:17",{"_index":864,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["src/command/user.create.command.ts:7",{"_index":861,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["src/hearthstone/dto/card.dto.ts",{"_index":332,"title":{},"body":{"interfaces/CardDto.html":{},"coverage.html":{}}}],["src/hearthstone/dto/deck.dto.ts",{"_index":433,"title":{},"body":{"interfaces/DeckDto.html":{},"coverage.html":{}}}],["src/hearthstone/hearthstone.controller.ts",{"_index":436,"title":{},"body":{"controllers/HearthstoneController.html":{},"coverage.html":{}}}],["src/hearthstone/hearthstone.controller.ts:24",{"_index":468,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:37",{"_index":475,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:47",{"_index":458,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:59",{"_index":472,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:65",{"_index":453,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:71",{"_index":450,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:78",{"_index":463,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:84",{"_index":455,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:89",{"_index":465,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.controller.ts:92",{"_index":461,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["src/hearthstone/hearthstone.module.ts",{"_index":609,"title":{},"body":{"modules/HearthstoneModule.html":{}}}],["src/hearthstone/hearthstone.service.ts",{"_index":613,"title":{},"body":{"injectables/HearthstoneService.html":{},"coverage.html":{}}}],["src/hearthstone/hearthstone.service.ts:117",{"_index":650,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:121",{"_index":628,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:150",{"_index":633,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:154",{"_index":631,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:16",{"_index":637,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:195",{"_index":638,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:20",{"_index":642,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:203",{"_index":653,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:207",{"_index":656,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:220",{"_index":646,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:241",{"_index":636,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:253",{"_index":644,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:261",{"_index":649,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/hearthstone/hearthstone.service.ts:9",{"_index":626,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["src/mail/mail.module.ts",{"_index":770,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service.ts",{"_index":800,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:5",{"_index":804,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:8",{"_index":806,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/templates",{"_index":795,"title":{},"body":{"modules/MailModule.html":{}}}],["src/main.ts",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/csrf.middleware.ts",{"_index":424,"title":{},"body":{"injectables/CsrfMiddleware.html":{},"coverage.html":{}}}],["src/middleware/csrf.middleware.ts:6",{"_index":429,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["src/prisma.service.ts",{"_index":827,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma.service.ts:10",{"_index":833,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma.service.ts:6",{"_index":834,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user/dto/user.dto.ts",{"_index":867,"title":{},"body":{"classes/UserDto.html":{},"coverage.html":{}}}],["src/user/dto/user.dto.ts:2",{"_index":872,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:3",{"_index":869,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:4",{"_index":870,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:5",{"_index":868,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/dto/user.dto.ts:6",{"_index":871,"title":{},"body":{"classes/UserDto.html":{}}}],["src/user/user.controller.ts",{"_index":838,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:10",{"_index":853,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:15",{"_index":846,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:20",{"_index":843,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:25",{"_index":849,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":875,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":877,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:16",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:24",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:6",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["standard",{"_index":559,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["start",{"_index":991,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":993,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":995,"title":{},"body":{"index.html":{}}}],["started",{"_index":971,"title":{"index.html":{}},"body":{}}],["starter",{"_index":984,"title":{},"body":{"index.html":{}}}],["statements",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":1014,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":753,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":799,"title":{},"body":{"modules/MailModule.html":{}}}],["string",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"interfaces/DeckDto.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["subject",{"_index":813,"title":{},"body":{"injectables/MailService.html":{}}}],["super",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":743,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":809,"title":{},"body":{"injectables/MailService.html":{},"index.html":{},"modules.html":{}}}],["svg",{"_index":557,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"modules.html":{}}}],["swagger",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":918,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":678,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["team",{"_index":810,"title":{},"body":{"injectables/MailService.html":{}}}],["template",{"_index":792,"title":{},"body":{"modules/MailModule.html":{},"injectables/MailService.html":{}}}],["terms",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{}}}],["test",{"_index":585,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{},"index.html":{}}}],["test:covsupport",{"_index":1000,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":999,"title":{},"body":{"index.html":{}}}],["testaaa",{"_index":704,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["tests",{"_index":997,"title":{},"body":{"index.html":{}}}],["text",{"_index":338,"title":{},"body":{"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["thanks",{"_index":1006,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":835,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":836,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.authservice.createuser",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.encodepassword(password",{"_index":865,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["this.authservice.login(body",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendverificationcode(body.email",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verificationcode",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.blizzardapi",{"_index":361,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{}}}],["this.blizzardapi.hearthstone.getmetadata",{"_index":700,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.blizzardapi.hearthstone.searchcards",{"_index":370,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["this.blizzardapi.hearthstone?.getmetadata",{"_index":527,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.blizzardapi.init",{"_index":363,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["this.blizzardapi.init(process.env.blizzard_api_key",{"_index":660,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.encodepassword(data.password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatetoken(user",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getandsaveallmetadata",{"_index":525,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.hsservice.addcardtodeck(number(body.deckid",{"_index":510,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.createdeck(req.body",{"_index":506,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.encodedeck(classslug",{"_index":501,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.getcards",{"_index":490,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.getclasses",{"_index":515,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.getdeck(parseint(id",{"_index":503,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.hsservice.getdeckpagination",{"_index":494,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["this.initcardscollection",{"_index":594,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.initcardscollection(page",{"_index":369,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["this.ispasswordvalid",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.decode(token",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.sign({id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwt.verify(token",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailerservice.sendmail",{"_index":807,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.senduserconfirmation(user",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma",{"_index":362,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.$transaction",{"_index":671,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.card.count",{"_index":682,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.card.createmany",{"_index":703,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.card.findmany",{"_index":661,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.card.upsert",{"_index":384,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.cardset.findunique",{"_index":378,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.cardset.upsert",{"_index":540,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.cardtype.upsert",{"_index":589,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.deck.count",{"_index":722,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.deck.create",{"_index":697,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.deck.delete",{"_index":687,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.deck.findmany",{"_index":702,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.deck.findunique",{"_index":705,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.deck.update",{"_index":683,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.gamemode.upsert",{"_index":533,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.hsclass.findmany",{"_index":720,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.hsclass.findunique",{"_index":664,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["this.prisma.hsclass.upsert",{"_index":570,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.keyword.findunique",{"_index":382,"title":{},"body":{"injectables/CreateCardCommand.html":{}}}],["this.prisma.keyword.upsert",{"_index":565,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.miniontype.upsert",{"_index":593,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.rarity.upsert",{"_index":583,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.setgroup.upsert",{"_index":554,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.spellschool.upsert",{"_index":538,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["this.prisma.user.create",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.findunique",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["this.prisma.user.update",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.repository.update(user.id",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createuser",{"_index":866,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["this.userservice.createuser(userdata",{"_index":859,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.getuser",{"_index":857,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.createuser(data",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone({email",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone({id",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(decoded",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{}}}],["token",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["tostring",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["touch",{"_index":1015,"title":{},"body":{"index.html":{}}}],["transport",{"_index":780,"title":{},"body":{"modules/MailModule.html":{}}}],["true",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{},"modules/MailModule.html":{},"injectables/UserCreateCommand.html":{}}}],["try",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["twitter",{"_index":1020,"title":{},"body":{"index.html":{}}}],["two",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["type",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CardDto.html":{},"injectables/CreateCardCommand.html":{},"injectables/CsrfMiddleware.html":{},"interfaces/DeckDto.html":{},"injectables/HearthstoneDataCommand.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["types/bcrypt",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":983,"title":{},"body":{"index.html":{}}}],["ui",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unit",{"_index":996,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HearthstoneController.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1030,"title":{},"body":{"properties.html":{}}}],["update",{"_index":422,"title":{},"body":{"injectables/CreateCardCommand.html":{},"injectables/HearthstoneDataCommand.html":{}}}],["updateuser",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser(params",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["use",{"_index":425,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["use(req",{"_index":426,"title":{},"body":{"injectables/CsrfMiddleware.html":{}}}],["useguards",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{}}}],["useguards(jwtauthguard",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HearthstoneController.html":{}}}],["useguards(jwtauthguard)@delete('deck/:id",{"_index":454,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["useguards(jwtauthguard)@delete('deck/cards/:id",{"_index":462,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["useguards(jwtauthguard)@get('user",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@post('deck",{"_index":452,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["useguards(jwtauthguard)@put('deck/cards",{"_index":449,"title":{},"body":{"controllers/HearthstoneController.html":{}}}],["user",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":876,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":808,"title":{},"body":{"injectables/MailService.html":{}}}],["user.id",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{}}}],["user.ipslogged.includes(ip",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.service",{"_index":854,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MailService.html":{}}}],["user.verificationcode",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{}}}],["user.verified",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dto/user.dto",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["user/user.controller",{"_index":611,"title":{},"body":{"modules/HearthstoneModule.html":{}}}],["user/user.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserCreateCommand.html":{}}}],["user:create",{"_index":863,"title":{},"body":{"injectables/UserCreateCommand.html":{}}}],["usercontroller",{"_index":610,"title":{"controllers/UserController.html":{}},"body":{"modules/HearthstoneModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreatecommand",{"_index":56,"title":{"injectables/UserCreateCommand.html":{}},"body":{"modules/AppModule.html":{},"injectables/UserCreateCommand.html":{},"coverage.html":{},"overview.html":{}}}],["userdata",{"_index":850,"title":{},"body":{"controllers/UserController.html":{}}}],["userdto",{"_index":133,"title":{"classes/UserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/UserDto.html":{},"coverage.html":{}}}],["usermodel",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":50,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/HearthstoneService.html":{},"injectables/JwtStrategy.html":{},"injectables/MailService.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"classes/UserDto.html":{},"injectables/UserService.html":{}}}],["userpassword",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservice",{"_index":57,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserCreateCommand.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(token",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(decoded",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["verification",{"_index":818,"title":{},"body":{"injectables/MailService.html":{}}}],["verificationcode",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["verificationcode(@body",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcode(body",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcode(email",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserCreateCommand.html":{}}}],["version",{"_index":1028,"title":{},"body":{"properties.html":{}}}],["void",{"_index":844,"title":{},"body":{"controllers/UserController.html":{}}}],["watch",{"_index":992,"title":{},"body":{"index.html":{}}}],["website",{"_index":1018,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":814,"title":{},"body":{"injectables/MailService.html":{}}}],["world",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["yargs",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["year",{"_index":555,"title":{},"body":{"injectables/HearthstoneDataCommand.html":{}}}],["yes",{"_index":643,"title":{},"body":{"injectables/HearthstoneService.html":{}}}],["you'd",{"_index":1010,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HearthstoneModule.html":{},"modules/MailModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCsrfToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCsrfToken\n                        \n                    \n                \n            \n            \n                \ngetCsrfToken(req, res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('csrf')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpStatus, Req, Res } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('csrf')\n  getCsrfToken(@Req() req, @Res() res): string {\n    const csrf = req.csrfToken();\n    return res.status(HttpStatus.OK).json({ csrf });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHearthstoneModule\n\nHearthstoneModule\n\nAppModule -->\n\nHearthstoneModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nCreateCardCommand\n\nCreateCardCommand\n\nAppModule -->\n\nCreateCardCommand->AppModule\n\n\n\n\n\nHearthstoneDataCommand\n\nHearthstoneDataCommand\n\nAppModule -->\n\nHearthstoneDataCommand->AppModule\n\n\n\n\n\nMailService\n\nMailService\n\nAppModule -->\n\nMailService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserCreateCommand\n\nUserCreateCommand\n\nAppModule -->\n\nUserCreateCommand->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            AuthService\n                        \n                        \n                            CreateCardCommand\n                        \n                        \n                            HearthstoneDataCommand\n                        \n                        \n                            MailService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserCreateCommand\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HearthstoneModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { HearthstoneModule } from './hearthstone/hearthstone.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { CommandModule } from 'nestjs-command';\nimport { HearthstoneDataCommand } from './command/hs.data.command';\nimport { AuthModule } from './auth/auth.module';\nimport { MailModule } from './mail/mail.module';\nimport { UserCreateCommand } from './command/user.create.command';\nimport { UserService } from './user/user.service';\nimport { AuthService } from './auth/auth.service';\nimport { PrismaService } from './prisma.service';\nimport { MailService } from './mail/mail.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { AppController } from './app.controller';\nimport { CsrfMiddleware } from './middleware/csrf.middleware';\nimport { CreateCardCommand } from \"./command/hs.cards.command\";\n\n@Module({\n  imports: [\n    UserModule,\n    HearthstoneModule,\n    CommandModule,\n    AuthModule,\n    ConfigModule.forRoot(),\n    MailModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    PrismaService,\n    MailService,\n    JwtService,\n    AppService,\n    UserService,\n    AuthService,\n    UserCreateCommand,\n    HearthstoneDataCommand,\n    CreateCardCommand,\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer): any {\n    consumer\n      .apply(CsrfMiddleware)\n      .forRoutes({ path: '*', method: RequestMethod.ALL });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUserInfo\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                sendNewVerificationCode\n                            \n                            \n                                    Async\n                                verificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getUserInfo\n                        \n                    \n                \n            \n            \n                \ngetUserInfo(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('user')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { user: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(ip, body, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ip\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(body: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendNewVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendNewVerificationCode(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send_code')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verificationCode(body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('code')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  UseGuards,\n  Request,\n  Body,\n  HttpException,\n  HttpStatus,\n  Res,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { UserDto } from '../user/dto/user.dto';\nimport { Response } from 'express';\nimport * as dayjs from 'dayjs';\nimport {RealIp, RealIP} from \"nestjs-real-ip\";\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@RealIP() ip, @Body() body, @Res() res: Response) {\n    const { jwt, user } = await this.authService.login(body, ip);\n    res.cookie('Authentication', jwt, {\n      expires: dayjs().add(7, 'days').toDate(),\n    });\n    return res.status(200).json({ user: user });\n  }\n\n  @Get('logout')\n  async logout(@Res() res: Response) {\n    res.cookie('Authentication', null, {\n      expires: dayjs().toDate(),\n    });\n    return res.status(200).json({});\n  }\n\n  @Post('register')\n  async register(@Body() body: UserDto) {\n    const { username, email, password, terms, confirmPassword } = body;\n    console.log(body);\n    if (confirmPassword !== password)\n      throw new HttpException(\n        'the two passwords are not identical',\n        HttpStatus.BAD_REQUEST,\n      );\n    await this.authService.createUser({ username, email, password, terms });\n    return { username, email };\n  }\n\n  @Post('code')\n  async verificationCode(@Body() body) {\n    const result = await this.authService.verificationCode(\n      body.email,\n      body.code,\n    );\n    if (result.error)\n      throw new HttpException(result.message, HttpStatus.CONFLICT);\n    return result.message;\n  }\n\n  @Post('send_code')\n  async sendNewVerificationCode(@Body() body) {\n    const result = await this.authService.sendVerificationCode(body.email);\n    if (result.error) {\n      throw new HttpException(result.message, HttpStatus.CONFLICT);\n    }\n    return result.message;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('user')\n  getUserInfo(@Request() req) {\n    return {\n      user: req.user,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nMailService\n\nMailService\n\nAuthModule -->\n\nMailService->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            MailService\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { UserModule } from '../user/user.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\nimport { UserService } from '../user/user.service';\nimport { PrismaService } from '../prisma.service';\nimport { MailService } from '../mail/mail.service';\nimport * as dayjs from 'dayjs';\n\n@Module({\n  imports: [\n    UserModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '7d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    UserService,\n    PrismaService,\n    JwtStrategy,\n    MailService,\n  ],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                decode\n                            \n                            \n                                    Public\n                                encodePassword\n                            \n                            \n                                    Public\n                                generateToken\n                            \n                            \n                                    Public\n                                isPasswordValid\n                            \n                            \n                                    Public\n                                    Async\n                                login\n                            \n                            \n                                    Public\n                                    Async\n                                refresh\n                            \n                            \n                                    Public\n                                    Async\n                                sendVerificationCode\n                            \n                            \n                                    Private\n                                    Async\n                                validate\n                            \n                            \n                                    Public\n                                    Async\n                                validateUser\n                            \n                            \n                                    Public\n                                    Async\n                                verificationCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, mailService: MailService, jwt: JwtService, prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decode\n                        \n                    \n                \n            \n            \n                \n                    \n                    decode(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        encodePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    encodePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateToken(user: UserModel)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isPasswordValid\n                        \n                    \n                \n            \n            \n                \n                    \n                    isPasswordValid(password: string, userPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: literal type, ip: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ip\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        refresh\n                        \n                    \n                \n            \n            \n                \n                    \n                    refresh(user: UserModel)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        sendVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationCode(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(decoded: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    decoded\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        verificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verificationCode(email: string, code: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    code\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    HttpException,\n    HttpStatus,\n    Injectable,\n    UnauthorizedException,\n} from '@nestjs/common';\nimport {JwtService} from '@nestjs/jwt';\nimport {UserService} from '../user/user.service';\nimport * as bcrypt from 'bcryptjs';\nimport {User as UserModel} from 'prisma';\nimport {Prisma} from '@prisma/client';\nimport {MailService} from '../mail/mail.service';\nimport {PrismaService} from '../prisma.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private usersService: UserService,\n        private mailService: MailService,\n        private jwt: JwtService,\n        private prisma: PrismaService,\n    ) {\n    }\n\n    public async createUser(data: Prisma.UserCreateInput) {\n        data.password = this.encodePassword(data.password);\n        try {\n            const user = await this.usersService.createUser(data);\n            await this.mailService.sendUserConfirmation(user);\n            return user;\n        } catch (e) {\n            if (e instanceof Prisma.PrismaClientKnownRequestError) {\n                throw new HttpException('Username or email already exist.', HttpStatus.CONFLICT);\n            }\n            throw new HttpException('Problem with mailer', HttpStatus.BAD_GATEWAY);\n        }\n    }\n\n    public async login(\n        body: { email: string; password: string },\n        ip: string,\n    ): Promise {\n        const {email, password} = body;\n        const user: UserModel = await this.usersService.findOne({email});\n        if (!user) {\n            throw new HttpException('No user found', HttpStatus.UNAUTHORIZED);\n        }\n        const isPasswordValid: boolean = this.isPasswordValid(\n            password,\n            user.password,\n        );\n        if (!isPasswordValid) {\n            throw new HttpException('Invalid password', HttpStatus.UNAUTHORIZED);\n        }\n        await this.prisma.user.update({\n            where: {id: user.id},\n            data: {\n                lastLoginAt: new Date(),\n                ...(!user.IPsLogged.includes(ip) && {\n                    IPsLogged: {\n                        push: ip,\n                    },\n                }),\n            },\n        });\n        const jwt = this.generateToken(user);\n        user.password = undefined;\n        user.verificationCode = undefined;\n        return {jwt: jwt, user: user};\n    }\n\n    public async verificationCode(email: string, code: string) {\n        const user = await this.usersService.findOne({email});\n\n        if (!user) return {error: true, message: 'email not exist in database'};\n        if (user.verified) return {error: true, message: 'User already verified'};\n        if (user.verificationCode !== code)\n            return {error: true, message: 'Invalid code'};\n        await this.usersService.updateUser({\n            where: {id: user.id},\n            data: {verified: true},\n        });\n        return {error: false, message: 'User has been verified'};\n    }\n\n    public async refresh(user: UserModel): Promise {\n        //this.repository.update(user.id, { lastLoginAt: new Date() });\n\n        return this.generateToken(user);\n    }\n\n    // Decoding the JWT Token\n    public async decode(token: string): Promise {\n        return this.jwt.decode(token, null);\n    }\n\n    // Get User by User ID we get from decode()\n    public async validateUser(decoded: any): Promise {\n        return this.usersService.findOne({id: decoded.id});\n    }\n\n    // Generate JWT Token\n    public generateToken(user: UserModel): string {\n        return this.jwt.sign({id: user.id, username: user.username});\n    }\n\n    // Validate User's password\n    public isPasswordValid(password: string, userPassword: string): boolean {\n        return bcrypt.compareSync(password, userPassword);\n    }\n\n    // Encode User's password\n    public encodePassword(password: string): string {\n        const salt: string = bcrypt.genSaltSync(10);\n\n        return bcrypt.hashSync(password, salt);\n    }\n\n    // Validate JWT Token, throw forbidden error if JWT Token is invalid\n    private async validate(token: string): Promise {\n        const decoded: unknown = this.jwt.verify(token);\n\n        if (!decoded) {\n            throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n        }\n\n        const user: UserModel = await this.validateUser(decoded);\n\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n\n        return true;\n    }\n\n    public async sendVerificationCode(email: string) {\n        const user = await this.usersService.findOne({email});\n\n        if (!user) return {error: true, message: 'User not exist'};\n        if (user.verified) return {error: true, message: 'User already verified'};\n        await this.mailService.sendUserConfirmation(user);\n        return {error: false, message: 'code send'};\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CardDto.html":{"url":"interfaces/CardDto.html","title":"interface - CardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hearthstone/dto/card.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            blizzard_id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            classId\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nb\n                                        \n                                \n                                \n                                        \n                                            slug\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blizzard_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blizzard_id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        classId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nb\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nb:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slug\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slug:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CardDto {\n  blizzard_id: number;\n  name: string;\n  slug: string;\n  text: string;\n  nb?: number;\n  classId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CreateCardCommand.html":{"url":"injectables/CreateCardCommand.html","title":"injectable - CreateCardCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CreateCardCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/command/hs.cards.command.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                blizzardApi\n                            \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                initCardsCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/command/hs.cards.command.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(page: number, nb)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: 'blizzard:hearthstone:cards', describe: 'get cards data by page'})\n                \n            \n\n            \n                \n                    Defined in src/command/hs.cards.command.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nb\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initCardsCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    initCardsCollection(pageNb)\n                \n            \n\n\n            \n                \n                    Defined in src/command/hs.cards.command.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageNb\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        blizzardApi\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlizzardApi\n\n                    \n                \n                    \n                        \n                                Defined in src/command/hs.cards.command.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/command/hs.cards.command.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Command, Positional, Option } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { BlizzardApi } from 'blizzard-api-sample';\nimport { PrismaService } from '../prisma.service';\n\n@Injectable()\nexport class CreateCardCommand {\n  private blizzardApi: BlizzardApi;\n  private prisma: PrismaService;\n\n  constructor() {\n    this.blizzardApi = new BlizzardApi();\n    this.prisma = new PrismaService();\n  }\n\n  @Command({\n    command: 'blizzard:hearthstone:cards',\n    describe: 'get cards data by page',\n  })\n  async create(\n    @Positional({\n      name: 'page',\n      type: 'number',\n    })\n    page: number,\n    @Positional({\n      name: 'nb',\n      type: 'number',\n    })\n    nb,\n  ) {\n    await this.blizzardApi.init(\n      process.env.BLIZZARD_API_KEY,\n      process.env.BLIZZARD_API_SECRET,\n    );\n    if (!nb) nb = 1;\n    console.log(`Get ${nb} pages from the ${page} page`);\n    while (nb--) await this.initCardsCollection(page++);\n  }\n\n  async initCardsCollection(pageNb) {\n    const page = await this.blizzardApi.hearthstone.searchCards({\n      page: pageNb,\n    });\n    const cards = page.cards;\n    await cards.map(async (card) => {\n      if (card.cardSetId >= 12) {\n        const keywordIds = [];\n        const cardSet = await this.prisma.cardSet.findUnique({\n          where: { blizzard_id: card.cardSetId },\n        });\n        card?.keywordIds?.map(async (keywordId) => {\n          const keyword = await this.prisma.keyword.findUnique({\n            where: { blizzard_id: keywordId },\n          });\n          if (keyword) {\n            keywordIds.push(keyword.blizzard_id);\n          }\n        });\n        try {\n          await this.prisma.card.upsert({\n            where: { blizzard_id: card.id },\n            create: {\n              blizzard_id: card.id,\n              slug: card.slug,\n              name: card.name,\n              ...(card.multiClassIds && {\n                multiHsClass: {\n                  create: card.multiClassIds.map((classId) => ({\n                    hsClass: {\n                      connect: { blizzard_id: classId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.classId && {\n                hsClass: {\n                  connect: { blizzard_id: card.classId },\n                },\n              }),\n              ...(card.minionTypeId && {\n                minionType: {\n                  connect: { blizzard_id: card.minionTypeId },\n                },\n              }),\n              ...(card.spellSchool && {\n                spellSchool: {\n                  connect: { blizzard_id: card.spellSchoolId },\n                },\n              }),\n              ...(card.cardTypeId && {\n                cardType: {\n                  connect: { blizzard_id: card.cardTypeId },\n                },\n              }),\n              ...(card.cardSetId &&\n                cardSet && {\n                  cardSet: {\n                    connect: { blizzard_id: card.cardSetId },\n                  },\n                }),\n              ...(card.rarityId && {\n                rarity: {\n                  connect: { blizzard_id: card.rarityId },\n                },\n              }),\n              health: card.health,\n              attack: card.attack,\n              manaCost: card.manaCost,\n              artistName: card.artistName,\n              text: card.text,\n              image: card.image,\n              imageGold: card.imageGold,\n              cropImage: card.cropImage,\n              flavorText: card.flavorText,\n              ...(keywordIds && {\n                keywordCards: {\n                  create: keywordIds.map((keywordId) => ({\n                    keyword: {\n                      connect: { blizzard_id: keywordId },\n                    },\n                  })),\n                },\n              }),\n            },\n            update: {\n              blizzard_id: card.id,\n              slug: card.slug,\n              name: card.name,\n              ...(card.multiClassIds && {\n                multiHsClass: {\n                  create: card.multiClassIds.map((classId) => ({\n                    hsClass: {\n                      connect: { blizzard_id: classId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.classId && {\n                hsClass: {\n                  connect: { blizzard_id: card.classId },\n                },\n              }),\n              ...(card.minionTypeId && {\n                minionType: {\n                  connect: { blizzard_id: card.minionTypeId },\n                },\n              }),\n              ...(keywordIds && {\n                keywordCards: {\n                  create: keywordIds.map((keywordId) => ({\n                    keyword: {\n                      connect: { blizzard_id: keywordId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.spellSchool && {\n                spellSchool: {\n                  connect: { blizzard_id: card.spellSchoolId },\n                },\n              }),\n              ...(card.cardTypeId && {\n                cardType: {\n                  connect: { blizzard_id: card.cardTypeId },\n                },\n              }),\n              ...(card.cardSetId &&\n                cardSet && {\n                  cardSet: {\n                    connect: { blizzard_id: card.cardSetId },\n                  },\n                }),\n              ...(card.rarityId && {\n                rarity: {\n                  connect: { blizzard_id: card.rarityId },\n                },\n              }),\n              ...(card.spellSchoolId && {\n                spellSchool: {\n                  connect: { blizzard_id: card.spellSchoolId },\n                },\n              }),\n              health: card.health,\n              attack: card.attack,\n              manaCost: card.manaCost,\n              artistName: card.artistName,\n              text: card.text,\n              image: card.image,\n              imageGold: card.imageGold,\n              cropImage: card.cropImage,\n              flavorText: card.flavorText,\n            },\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CsrfMiddleware.html":{"url":"injectables/CsrfMiddleware.html","title":"injectable - CsrfMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CsrfMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/csrf.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/csrf.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class CsrfMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('test');\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DeckDto.html":{"url":"interfaces/DeckDto.html","title":"interface - DeckDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DeckDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hearthstone/dto/deck.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cards\n                                        \n                                \n                                \n                                        \n                                            classId\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cards\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cards:         CardDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CardDto\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        classId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        classId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CardDto } from './card.dto';\n\nexport interface DeckDto {\n  name: string;\n  classId: number;\n  cards: CardDto;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HearthstoneController.html":{"url":"controllers/HearthstoneController.html","title":"controller - HearthstoneController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HearthstoneController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hearthstone/hearthstone.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                hearthstone\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCardIntoDeck\n                            \n                            \n                                    Async\n                                createDeck\n                            \n                            \n                                    Async\n                                deleteDeck\n                            \n                            \n                                    Async\n                                generateDeckCode\n                            \n                            \n                                    Async\n                                getAllHsClasses\n                            \n                            \n                                    Async\n                                removeCardIntoDeck\n                            \n                            \n                                    Async\n                                saveMetadata\n                            \n                            \n                                    Async\n                                showCards\n                            \n                            \n                                    Async\n                                showDeck\n                            \n                            \n                                    Async\n                                showDecksPage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCardIntoDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCardIntoDeck(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Put('deck/cards')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDeck(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('deck')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDeck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('deck/:id')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateDeckCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateDeckCode(classSlug, cards)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('encode')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classSlug\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cards\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllHsClasses\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllHsClasses()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('classes')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeCardIntoDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeCardIntoDeck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete('deck/cards/:id')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMetadata()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('metadata')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    showCards(query)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('cards')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    showDeck(id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('deck/:id')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        showDecksPage\n                        \n                    \n                \n            \n            \n                \n                    \n                    showDecksPage(page)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('decks')\n                \n            \n\n            \n                \n                    Defined in src/hearthstone/hearthstone.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { HearthstoneService } from './hearthstone.service';\nimport { Deck as DeckModel, Card as CardModel } from '@prisma/client';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\n@Controller('hearthstone')\nexport class HearthstoneController {\n  constructor(private hsService: HearthstoneService) {}\n\n  @Get('cards')\n  async showCards(@Query() query): Promise {\n    console.log(query);\n    const { page, name, cardClass, cardType } = query;\n    return this.hsService.getCards(\n      page,\n      36,\n      name,\n      cardClass,\n      cardType ? Number(cardType) : null,\n    );\n  }\n\n  @Get('decks')\n  async showDecksPage(@Query('page') page) {\n    const result = await this.hsService.getDeckPagination(\n      page ? Number(page) : 1,\n      16,\n    );\n    console.log(result);\n    return result;\n  }\n\n  @Post('encode')\n  async generateDeckCode(@Body('classSlug') classSlug, @Body('cards') cards) {\n    console.log(classSlug);\n    if (!classSlug) {\n      throw new HttpException(\n        'classId must be defined',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return this.hsService.encodeDeck(classSlug, cards);\n  }\n\n  @Get('deck/:id')\n  async showDeck(@Param('id') id): Promise {\n    return await this.hsService.getDeck(parseInt(id));\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('deck')\n  async createDeck(@Req() req): Promise {\n    return this.hsService.createDeck(req.body, req.user);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Put('deck/cards')\n  async addCardIntoDeck(@Req() req, @Body() body): Promise {\n    console.log(req.user);\n    return await this.hsService.addCardToDeck(Number(body.deckId), body.cards);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('deck/cards/:id')\n  async removeCardIntoDeck(): Promise {\n    return;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete('deck/:id')\n  async deleteDeck(): Promise {\n    return;\n  }\n\n  @Get('metadata')\n  async saveMetadata(): Promise {}\n\n  @Get('classes')\n  async getAllHsClasses() {\n    return { classes: await this.hsService.getClasses() };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HearthstoneDataCommand.html":{"url":"injectables/HearthstoneDataCommand.html","title":"injectable - HearthstoneDataCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HearthstoneDataCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/command/hs.data.command.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                blizzardApi\n                            \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getAndSaveAllMetadata\n                            \n                            \n                                    Async\n                                initCardsCollection\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/command/hs.data.command.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: 'blizzard:hearthstone:metadata', describe: 'get and add/update all hearthstone data'})\n                \n            \n\n            \n                \n                    Defined in src/command/hs.data.command.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAndSaveAllMetadata\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAndSaveAllMetadata()\n                \n            \n\n\n            \n                \n                    Defined in src/command/hs.data.command.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initCardsCollection\n                        \n                    \n                \n            \n            \n                \n                    \n                    initCardsCollection()\n                \n            \n\n\n            \n                \n                    Defined in src/command/hs.data.command.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        blizzardApi\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlizzardApi\n\n                    \n                \n                    \n                        \n                                Defined in src/command/hs.data.command.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrismaService\n\n                    \n                \n                    \n                        \n                                Defined in src/command/hs.data.command.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Command, Positional, Option } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { BlizzardApi } from 'blizzard-api-sample';\nimport { PrismaService } from '../prisma.service';\n\n@Injectable()\nexport class HearthstoneDataCommand {\n  private blizzardApi: BlizzardApi;\n  private prisma: PrismaService;\n  constructor() {\n    this.blizzardApi = new BlizzardApi();\n    this.prisma = new PrismaService();\n  }\n\n  @Command({\n    command: 'blizzard:hearthstone:metadata',\n    describe: 'get and add/update all hearthstone data',\n  })\n  async create() {\n    await this.blizzardApi.init(\n      process.env.BLIZZARD_API_KEY,\n      process.env.BLIZZARD_API_SECRET,\n    );\n    await this.getAndSaveAllMetadata();\n    console.log('test');\n  }\n\n  async getAndSaveAllMetadata() {\n    const metadata = await this.blizzardApi.hearthstone?.getMetadata();\n    Object.getOwnPropertyNames(metadata).map((str) => {\n      console.log(str);\n      console.table(metadata[str]);\n    });\n    await metadata['gameModes'].map(async (item) => {\n      await this.prisma.gameMode.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n        },\n        update: {},\n      });\n    });\n\n    await metadata['spellSchools'].map(async (item) => {\n      await this.prisma.spellSchool.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n        },\n        update: {},\n      });\n    });\n\n    await metadata['sets'].map(async (item) => {\n      await this.prisma.cardSet.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          slug: item.slug,\n          name: item.name,\n          type: item.type,\n          collectibleCount: item.collectibleCount,\n          collectibleRevealedCount: item.collectibleRevealedCount,\n          nonCollectibleCount: item.nonCollectibleCount,\n          nonCollectibleRevealedCount: item.nonCollectibleRevealedCount,\n        },\n        update: {\n          slug: item.slug,\n          name: item.name,\n        },\n      });\n    });\n\n    await metadata['setGroups'].map(async (item) => {\n      const cardSets = item.cardSets?.map((setSlug) => ({\n        cardSet: {\n          connect: {\n            slug: setSlug,\n          },\n        },\n      }));\n      await this.prisma.setGroup.upsert({\n        where: { slug: item.slug },\n        create: {\n          slug: item.slug,\n          year: item.year,\n          svg: item.svg,\n          name: item.name,\n          standard: item.standard,\n          icon: item.icon,\n          setGroupCards: {\n            create: cardSets,\n          },\n        },\n        update: {\n          slug: item.slug,\n          year: item.year,\n          svg: item.svg,\n          name: item.name,\n          standard: item.standard,\n          icon: item.icon,\n          setGroupCards: {\n            create: cardSets,\n          },\n        },\n      });\n    });\n\n    await metadata['keywords'].map(async (item) => {\n      await this.prisma.keyword.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n          text: item.text,\n          refText: item.refText,\n        },\n        update: {\n          name: item.name,\n          slug: item.slug,\n          text: item.text,\n          refText: item.refText,\n        },\n      });\n    });\n\n    await metadata['classes'].map(async (item) => {\n      return this.prisma.hsClass.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n          heroCardId: item.cardId,\n          powerCardId: item.heroPowerCardId,\n        },\n        update: {\n          name: item.name,\n          slug: item.slug,\n          heroCardId: item.cardId,\n          powerCardId: item.heroPowerCardId,\n        },\n      });\n    });\n\n    await metadata['rarities'].map(async (item) => {\n      const dustValue = [\n        item.dustValue[0] ? item.dustValue[0] : 0,\n        item.dustValue[1] ? item.dustValue[1] : 0,\n      ];\n      const craftingCost = [\n        item.craftingCost[0] ? item.craftingCost[0] : 0,\n        item.craftingCost[1] ? item.craftingCost[1] : 0,\n      ];\n      await this.prisma.rarity.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          slug: item.slug,\n          name: item.name,\n          craftingCost: craftingCost,\n          dustValue: dustValue,\n        },\n        update: {\n          slug: item.slug,\n          name: item.name,\n          craftingCost: craftingCost,\n          dustValue: dustValue,\n        },\n      });\n    });\n\n    await metadata['types'].map(async (item) => {\n      const test = item.gameModes?.map((gameModeId) => ({\n        gamemode: {\n          connect: {\n            blizzard_id: gameModeId,\n          },\n        },\n      }));\n      await this.prisma.cardType.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n          gameModes: {\n            create: test,\n          },\n        },\n        update: {\n          name: item.name,\n          slug: item.slug,\n        },\n      });\n    });\n\n    await metadata['minionTypes'].map(async (item) => {\n      const createGameModeRelation = item.gameModes?.map((gameModeId) => ({\n        gamemode: {\n          connect: {\n            blizzard_id: gameModeId,\n          },\n        },\n      }));\n      await this.prisma.minionType.upsert({\n        where: { blizzard_id: item.id },\n        create: {\n          blizzard_id: item.id,\n          name: item.name,\n          slug: item.slug,\n          gameModes: {\n            create: createGameModeRelation,\n          },\n        },\n        update: {\n          name: item.name,\n          slug: item.slug,\n        },\n      });\n    });\n    //await this.initCardsCollection();\n  }\n\n  async initCardsCollection() {\n    const firstPage = await this.blizzardApi.hearthstone.searchCards({\n      page: 1,\n    });\n    let cards = firstPage.cards;\n    for (let i = 2; i != firstPage.pageCount + 1; i++) {\n      const cardsTmp = await this.blizzardApi.hearthstone.searchCards({\n        page: i,\n      });\n      cards = cards.concat(cardsTmp.cards);\n      console.log(cardsTmp.page + ' / ' + firstPage.pageCount);\n    }\n    await cards.map(async (card) => {\n      if (card.cardSetId >= 12) {\n        const cardSet = await this.prisma.cardSet.findUnique({\n          where: { blizzard_id: card.cardSetId },\n        });\n        card?.keywordIds?.map((keywordId) => {\n          console.log(keywordId);\n        });\n        try {\n          await this.prisma.card.upsert({\n            where: { blizzard_id: card.id },\n            create: {\n              blizzard_id: card.id,\n              slug: card.slug,\n              name: card.name,\n              ...(card.multiClassIds && {\n                multiHsClass: {\n                  create: card.multiClassIds.map((classId) => ({\n                    hsClass: {\n                      connect: { blizzard_id: classId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.classId && {\n                hsClass: {\n                  connect: { blizzard_id: card.classId },\n                },\n              }),\n              ...(card.minionTypeId && {\n                minionType: {\n                  connect: { blizzard_id: card.minionTypeId },\n                },\n              }),\n              ...(card.keywordIds && {\n                keywordCards: {\n                  create: card.keywordIds.map((keywordId) => ({\n                    keyword: {\n                      connect: { blizzard_id: keywordId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.spellSchool && {\n                spellSchool: {\n                  connect: { blizzard_id: card.spellSchoolId },\n                },\n              }),\n              ...(card.cardTypeId && {\n                cardType: {\n                  connect: { blizzard_id: card.cardTypeId },\n                },\n              }),\n              ...(card.cardSetId &&\n                cardSet && {\n                  cardSet: {\n                    connect: { blizzard_id: card.cardSetId },\n                  },\n                }),\n              ...(card.rarityId && {\n                rarity: {\n                  connect: { blizzard_id: card.rarityId },\n                },\n              }),\n              health: card.health,\n              attack: card.attack,\n              manaCost: card.manaCost,\n              artistName: card.artistName,\n              text: card.text,\n              image: card.image,\n              imageGold: card.imageGold,\n              cropImage: card.cropImage,\n              flavorText: card.flavorText,\n              keywordCards: {},\n            },\n            update: {\n              blizzard_id: card.id,\n              slug: card.slug,\n              name: card.name,\n              ...(card.multiClassIds && {\n                multiHsClass: {\n                  connectOrCreate: card.multiClassIds.map((classId) => ({\n                    hsClass: {\n                      connect: { blizzard_id: classId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.classId && {\n                hsClass: {\n                  connect: { blizzard_id: card.classId },\n                },\n              }),\n              ...(card.minionTypeId && {\n                minionType: {\n                  connect: { blizzard_id: card.minionTypeId },\n                },\n              }),\n              ...(card.keywordIds && {\n                keywordCards: {\n                  create: card.keywordIds.map((keywordId) => ({\n                    keyword: {\n                      connect: { blizzard_id: keywordId },\n                    },\n                  })),\n                },\n              }),\n              ...(card.spellSchool && {\n                spellSchool: {\n                  connect: { blizzard_id: card.spellSchoolId },\n                },\n              }),\n              ...(card.cardTypeId && {\n                cardType: {\n                  connect: { blizzard_id: card.cardTypeId },\n                },\n              }),\n              ...(card.cardSetId &&\n                cardSet && {\n                  cardSet: {\n                    connect: { blizzard_id: card.cardSetId },\n                  },\n                }),\n              ...(card.rarityId && {\n                rarity: {\n                  connect: { blizzard_id: card.rarityId },\n                },\n              }),\n              health: card.health,\n              attack: card.attack,\n              manaCost: card.manaCost,\n              artistName: card.artistName,\n              text: card.text,\n              image: card.image,\n              imageGold: card.imageGold,\n              cropImage: card.cropImage,\n              flavorText: card.flavorText,\n              keywordCards: {},\n            },\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HearthstoneModule.html":{"url":"modules/HearthstoneModule.html","title":"module - HearthstoneModule","body":"\n                   \n\n\n\n\n    Modules\n    HearthstoneModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_HearthstoneModule\n\n\n\ncluster_HearthstoneModule_providers\n\n\n\n\nHearthstoneService\n\nHearthstoneService\n\n\n\nHearthstoneModule\n\nHearthstoneModule\n\nHearthstoneModule -->\n\nHearthstoneService->HearthstoneModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nHearthstoneModule -->\n\nPrismaService->HearthstoneModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/hearthstone/hearthstone.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            HearthstoneService\n                        \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            HearthstoneController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { HearthstoneService } from './hearthstone.service';\nimport { UserController } from \"../user/user.controller\";\nimport { HearthstoneController } from \"./hearthstone.controller\";\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  controllers: [HearthstoneController],\n  providers: [HearthstoneService, PrismaService]\n})\nexport class HearthstoneModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HearthstoneService.html":{"url":"injectables/HearthstoneService.html","title":"injectable - HearthstoneService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HearthstoneService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hearthstone/hearthstone.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                blizzardApi\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCardToDeck\n                            \n                            \n                                    Async\n                                createDeck\n                            \n                            \n                                    Async\n                                deleteDeck\n                            \n                            \n                                    Async\n                                encodeDeck\n                            \n                            \n                                    Async\n                                getAllCards\n                            \n                            \n                                    Async\n                                getAllDecks\n                            \n                            \n                                    Async\n                                getCards\n                            \n                            \n                                    Async\n                                getClasses\n                            \n                            \n                                    Async\n                                getDeck\n                            \n                            \n                                    Async\n                                getDeckPagination\n                            \n                            \n                                    Async\n                                removeCardFromDeck\n                            \n                            \n                                    Async\n                                saveCards\n                            \n                            \n                                    Async\n                                saveDecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/hearthstone/hearthstone.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addCardToDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    addCardToDeck(deckId, cards: Card[])\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deckId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cards\n                                    \n                                            Card[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    createDeck(data: any, user: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteDeck(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        encodeDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    encodeDeck(classSlug: string, cards: any)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:241\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    classSlug\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    cards\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllCards()\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllDecks\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllDecks()\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:195\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCards(page: number, nbPerPage: number, name?: string, cardClassSlug?: string, cardType?: number, manaCost?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nbPerPage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cardClassSlug\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    cardType\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    manaCost\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getClasses\n                        \n                    \n                \n            \n            \n                \n                    \n                    getClasses()\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:253\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeck(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getDeckPagination\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDeckPagination(page: number, nbItem: number)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:261\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    nbItem\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeCardFromDeck\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeCardFromDeck()\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveCards\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveCards(params: Prisma.CardCreateManyInput)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            Prisma.CardCreateManyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveDecks\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveDecks(params: Prisma.DeckCreateManyInput)\n                \n            \n\n\n            \n                \n                    Defined in src/hearthstone/hearthstone.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            Prisma.DeckCreateManyInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        blizzardApi\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BlizzardApi\n\n                    \n                \n                    \n                        \n                                Defined in src/hearthstone/hearthstone.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma.service';\nimport { Deck, Card, Prisma } from '@prisma/client';\nimport { BlizzardApi } from 'blizzard-api-sample';\nimport { encode, decode, FormatType, DeckDefinition } from 'deckstrings';\n\n@Injectable()\nexport class HearthstoneService {\n  private blizzardApi: BlizzardApi;\n\n  constructor(private prisma: PrismaService) {\n    this.blizzardApi = new BlizzardApi();\n    //this.blizzardApi.init(process.env.BLIZZARD_API_KEY, process.env.BLIZZARD_API_SECRET);\n  }\n\n  async getAllCards(): Promise {\n    return this.prisma.card.findMany();\n  }\n\n  async getCards(\n    page: number,\n    nbPerPage: number,\n    name?: string,\n    cardClassSlug?: string,\n    cardType?: number,\n    manaCost?: number,\n  ): Promise {\n    const optionalSearch = {\n      ...(cardType && { cardTypeId: cardType }),\n      ...(manaCost && { manaCost: manaCost }),\n    };\n    const hsClass = await this.prisma.hsClass.findUnique({\n      where: { slug: cardClassSlug },\n    });\n    const filters = {\n      cardSet: {\n        setGroupCards: {\n          some: {\n            setGroupSlug: 'standard',\n          },\n        },\n      },\n      AND: [\n        {\n          OR: [{ hsClassId: 12 }, { hsClassId: hsClass?.blizzard_id }],\n        },\n        {\n          OR: [\n            {\n              multiHsClass: {\n                none: {},\n              },\n            },\n            {\n              multiHsClass: {\n                some: {\n                  hsClassId: hsClass?.blizzard_id,\n                },\n              },\n            },\n          ],\n        },\n      ],\n      NOT: [\n        {\n          cardSet: null,\n        },\n      ],\n    };\n    const [cards, count] = await this.prisma.$transaction([\n      this.prisma.card.findMany({\n        where: {\n          ...(name && {\n            name: {\n              contains: name,\n              mode: 'insensitive',\n            },\n          }),\n          ...filters,\n        },\n        include: {\n          multiHsClass: {\n            select: {\n              hsClass: {\n                select: {\n                  blizzard_id: true,\n                  name: true,\n                  slug: true,\n                },\n              },\n            },\n          },\n          rarity: true,\n          cardType: true,\n          hsClass: true,\n          cardSet: true,\n        },\n        skip: nbPerPage * (page - 1),\n        take: nbPerPage,\n        orderBy: [{ manaCost: 'asc' }, { rarityId: 'asc' }, { name: 'asc' }],\n      }),\n      this.prisma.card.count({\n        where: {\n          ...(name && {\n            name: {\n              contains: name,\n              mode: 'insensitive',\n            },\n          }),\n          ...filters,\n        },\n      }),\n    ]);\n    return { cards, count, hsClass };\n  }\n\n  async removeCardFromDeck() {\n    return;\n  }\n\n  async addCardToDeck(deckId, cards: Card[]) {\n    await this.prisma.$transaction([\n      this.prisma.deck.update({\n        where: { id: deckId },\n        data: {\n          cards: {\n            deleteMany: {\n              deckId: deckId,\n            },\n          },\n        },\n      }),\n      this.prisma.deck.update({\n        where: { id: deckId },\n        data: {\n          cards: {\n            create: cards.map((card) => ({\n              card: {\n                connect: {\n                  blizzard_id: card.blizzard_id,\n                },\n              },\n            })),\n          },\n        },\n      }),\n    ]);\n  }\n\n  async deleteDeck(params: { id: number }) {\n    return this.prisma.deck.delete({ where: params });\n  }\n\n  async createDeck(\n    data: any,\n    user: { email: string; id: number },\n  ): Promise {\n    const hsClass = await this.prisma.hsClass.findUnique({\n      where: { slug: data.classSlug },\n    });\n    let nbCards = 0;\n    const createCards = data.cards.map((card) => {\n      if (card.nb > 2)\n        throw new HttpException(\n          'there cannot be more than 2 the same card in a deck',\n          HttpStatus.BAD_REQUEST,\n        );\n      //if (card.classId !== 12 && card.classId !== hsClass.blizzard_id) {\n\n      nbCards += card.nb;\n      return {\n        nb: card.nb,\n        card: {\n          connect: {\n            blizzard_id: Number(card.blizzard_id),\n          },\n        },\n      };\n    });\n    return this.prisma.deck.create({\n      data: {\n        name: data.deckName,\n        class: {\n          connect: { blizzard_id: hsClass.blizzard_id },\n        },\n        nbCards,\n        cards: {\n          create: createCards,\n        },\n        author: { connect: { id: user.id } },\n      },\n    });\n  }\n\n  async getAllDecks(): Promise {\n    const metadata = await this.blizzardApi.hearthstone.getMetadata();\n    console.log(metadata);\n    return this.prisma.deck.findMany({\n      include: { cards: { include: { card: true } } },\n    });\n  }\n\n  async saveCards(params: Prisma.CardCreateManyInput) {\n    await this.prisma.card.createMany({ data: params });\n  }\n\n  async saveDecks(params: Prisma.DeckCreateManyInput) {\n    await this.prisma.deck.create({\n      data: {\n        name: 'testAAA',\n        cards: {\n          create: {\n            card: { connect: { id: 1 } },\n          },\n        },\n      },\n    });\n  }\n\n  async getDeck(id: number) {\n    const deck = await this.prisma.deck.findUnique({\n      where: { id: id },\n      include: {\n        cards: {\n          include: { card: { include: { rarity: true, cardType: true } } },\n        },\n        class: true,\n      },\n    });\n    return {\n      deck: {\n        name: deck.name,\n        authorId: deck.authorId,\n        classId: deck.classId,\n        hsClass: deck.class,\n        cards: deck.cards.map((card) => card.card),\n      },\n    };\n  }\n\n  async encodeDeck(classSlug: string, cards: any) {\n    const hsClass = await this.prisma.hsClass.findUnique({\n      where: { slug: classSlug },\n    });\n    const deck: DeckDefinition = {\n      cards: cards.map((item) => [item.blizzard_id, item.nb ? item.nb : 1]),\n      heroes: [hsClass.heroCardId],\n      format: 1,\n    };\n    return encode(deck);\n  }\n\n  async getClasses() {\n    return this.prisma.hsClass.findMany({\n      orderBy: {\n        blizzard_id: 'asc',\n      },\n    });\n  }\n\n  async getDeckPagination(page: number, nbItem: number) {\n    const [decks, count] = await this.prisma.$transaction([\n      this.prisma.deck.findMany({\n        skip: page === 1 ? 0 : page * nbItem,\n        take: nbItem,\n        select: {\n          id: true,\n          name: true,\n          author: {\n            select: {\n              username: true,\n            },\n          },\n          class: true,\n          cards: {\n            select: {\n              card: {\n                select: {\n                  rarity: { select: { craftingCost: true } },\n                  manaCost: true,\n                  attack: true,\n                },\n              },\n            },\n          },\n        },\n      }),\n      this.prisma.deck.count(),\n    ]);\n    const deckWithCost = decks.map((deck) => {\n      const cost = deck.cards.map((card) => {\n        return card.card.rarity.craftingCost[0];\n      });\n      return { deck, cost: cost?.[0] | 0 };\n    });\n    return { decks: deckWithCost, count };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                canActivate\n                            \n                            \n                                    Public\n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        handleRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleRequest(err, user: UserModel)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                            UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard, IAuthGuard } from '@nestjs/passport';\nimport { User as UserModel } from 'prisma';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') implements IAuthGuard {\n  public handleRequest(err: unknown, user: UserModel): any {\n    return user;\n  }\n\n  public async canActivate(context: ExecutionContext): Promise {\n    await super.canActivate(context);\n\n    const { user } = context.switchToHttp().getRequest();\n\n    return !!user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { Request } from 'express';\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly userService: UserService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: {\n    id: number;\n    username: string;\n    iat: number;\n    exp: number;\n  }) {\n    console.log(payload);\n    if (payload.id && payload.username) {\n      const user = await this.userService.findOne({ id: payload.id });\n      user.password = undefined;\n      user.verificationCode = undefined;\n      return user;\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\n\nMailService\n\nMailService\n\n\n\nMailModule\n\nMailModule\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { MailerModule } from \"@nestjs-modules/mailer\";\nimport { HandlebarsAdapter } from \"@nestjs-modules/mailer/dist/adapters/handlebars.adapter\";\nimport { join } from 'path';\nimport { EjsAdapter } from \"@nestjs-modules/mailer/dist/adapters/ejs.adapter\";\n\n@Module({\n  imports: [\n    MailerModule.forRoot({\n      // transport: 'smtps://user@example.com:topsecret@smtp.example.com',\n      // or\n      transport: {\n        port: 587,\n        host: 'smtp.ethereal.email',\n        secure: false,\n        auth: {\n          user: 'rylan.crist12@ethereal.email',\n          pass: 'P56ua6XRMRq5auvh4y',\n        },\n      },\n      defaults: {\n        from: '\"No Reply\" ',\n      },\n      template: {\n        dir: process.cwd() + '/src/mail/templates/',\n        adapter: new HandlebarsAdapter(), // or new PugAdapter() or new EjsAdapter()\n        options: {\n          strict: true,\n        },\n      },\n    }),\n  ],\n  providers: [MailService]\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendUserConfirmation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendUserConfirmation\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendUserConfirmation(user: UserModel)\n                \n            \n\n\n            \n                \n                    Defined in src/mail/mail.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { MailerService } from \"@nestjs-modules/mailer\";\nimport { User as UserModel } from '@prisma/client';\n@Injectable()\nexport class MailService {\n  constructor(private mailerService: MailerService) {}\n\n  async sendUserConfirmation(user: UserModel) {\n    await this.mailerService.sendMail({\n      to: user.email,\n      // from: '\"Support Team\" ', // override default from\n      subject: 'Welcome to Nice App! Confirm your Email',\n      template: 'verification', // `.hbs` extension is appended automatically\n      context: { // ✏️ filling curly brackets with content\n        username: user.username,\n        code: user.verificationCode,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma.service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeAvatar\n                            \n                            \n                                changePassword\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                getUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeAvatar\n                        \n                    \n                \n            \n            \n                \nchangeAvatar()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('avatar')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        changePassword\n                        \n                    \n                \n            \n            \n                \nchangePassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userData: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, Put } from \"@nestjs/common\";\nimport { UserService } from \"./user.service\";\nimport { User as UserModel } from \"@prisma/client\";\n@Controller('user')\nexport class UserController {\n\n  constructor(private userService: UserService) {}\n\n  @Get(':id')\n  getUser(@Param('id') id: string) {\n    //this.userService.getUser();\n  }\n\n  @Put('password')\n  changePassword() {\n\n  }\n\n  @Put('avatar')\n  changeAvatar() {\n\n  }\n\n  @Post('create')\n  async createUser(@Body() userData: { username: string; email: string, password: string }): Promise {\n    return await this.userService.createUser(userData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateCommand.html":{"url":"injectables/UserCreateCommand.html","title":"injectable - UserCreateCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/command/user.create.command.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/command/user.create.command.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(email: string, username: string, password: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Command({command: 'user:create', describe: 'get and add/update all hearthstone data'})\n                \n            \n\n            \n                \n                    Defined in src/command/user.create.command.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Command, Positional } from 'nestjs-command';\nimport { Injectable } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { AuthService } from '../auth/auth.service';\n\n@Injectable()\nexport class UserCreateCommand {\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n  ) {}\n\n  @Command({\n    command: 'user:create',\n    describe: 'get and add/update all hearthstone data',\n  })\n  async create(\n    @Positional({\n      name: 'email',\n      type: 'string',\n    })\n    email: string,\n    @Positional({\n      name: 'username',\n      type: 'string',\n    })\n    username: string,\n    @Positional({\n      name: 'password',\n      type: 'string',\n    })\n    password: string,\n  ) {\n    password = this.authService.encodePassword(password);\n    const result = await this.userService.createUser({\n      email,\n      username,\n      password,\n      terms: true,\n      verified: true,\n    });\n    console.log(result);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDto.html":{"url":"classes/UserDto.html","title":"class - UserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmPassword\n                            \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                terms\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        terms\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UserDto {\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  terms: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { PrismaService } from \"../prisma.service\";\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService, PrismaService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(data: Prisma.UserCreateInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Prisma.UserCreateInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(where: Prisma.UserWhereUniqueInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    where\n                                    \n                                            Prisma.UserWhereUniqueInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(params: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { User as UserModel, Prisma } from '@prisma/client';\nimport { PrismaService } from '../prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  async createUser(data: Prisma.UserCreateInput) {\n    data.verificationCode = Math.floor(\n      100000 + Math.random() * 999999,\n    ).toString();\n    return this.prisma.user.create({ data });\n  }\n\n  async updateUser(params: {\n    where: Prisma.UserWhereUniqueInput;\n    data: Prisma.UserUpdateInput;\n  }): Promise {\n    const { where, data } = params;\n    return this.prisma.user.update({ where, data });\n  }\n\n  async deleteUser(where: Prisma.UserWhereUniqueInput) {}\n\n  async findOne(params: {\n    id?: number;\n    email?: string;\n    username?: string;\n    verificationCode?: string;\n  }): Promise {\n    return this.prisma.user.findUnique({\n      where: params,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cli.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/command/hs.cards.command.ts\n            \n            injectable\n            CreateCardCommand\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/command/hs.data.command.ts\n            \n            injectable\n            HearthstoneDataCommand\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/command/user.create.command.ts\n            \n            injectable\n            UserCreateCommand\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/hearthstone/dto/card.dto.ts\n            \n            interface\n            CardDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/hearthstone/dto/deck.dto.ts\n            \n            interface\n            DeckDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/hearthstone/hearthstone.controller.ts\n            \n            controller\n            HearthstoneController\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/hearthstone/hearthstone.service.ts\n            \n            injectable\n            HearthstoneService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/csrf.middleware.ts\n            \n            injectable\n            CsrfMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/user.dto.ts\n            \n            class\n            UserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs-modules/mailer : ^1.6.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : ^3.13.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            bcrypt : ^5.0.1\n        \n            bcryptjs : ^2.4.3\n        \n            blizzard-api-sample : ^1.0.1\n        \n            cookie-parser : ^1.4.6\n        \n            csurf : ^1.11.0\n        \n            dayjs : ^1.11.2\n        \n            deckstrings : ^2.2.1\n        \n            ejs : ^3.1.7\n        \n            handlebars : ^4.7.7\n        \n            helmet : ^5.0.2\n        \n            nestjs-command : ^3.1.1\n        \n            nestjs-real-ip : ^2.2.0\n        \n            nodemailer : ^6.7.5\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            passport-jwt-cookiecombo : ^1.0.5\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            yargs : ^17.4.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../cli.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/cli.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HearthstoneModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_HearthstoneModule\n\n\n\ncluster_HearthstoneModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHearthstoneModule\n\nHearthstoneModule\n\nAppModule -->\n\nHearthstoneModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nAppModule -->\n\nAuthService->AppModule\n\n\n\n\n\nCreateCardCommand\n\nCreateCardCommand\n\nAppModule -->\n\nCreateCardCommand->AppModule\n\n\n\n\n\nHearthstoneDataCommand\n\nHearthstoneDataCommand\n\nAppModule -->\n\nHearthstoneDataCommand->AppModule\n\n\n\n\n\nMailService\n\nMailService\n\nAuthModule -->\n\nMailService->AuthModule\n\n\n\nMailModule -->\n\nMailService->MailModule\n\n\n\nAppModule -->\n\nMailService->AppModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nAuthModule -->\n\nPrismaService->AuthModule\n\n\n\nHearthstoneModule -->\n\nPrismaService->HearthstoneModule\n\n\n\nUserModule -->\n\nPrismaService->UserModule\n\n\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserCreateCommand\n\nUserCreateCommand\n\nAppModule -->\n\nUserCreateCommand->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nHearthstoneService\n\nHearthstoneService\n\nHearthstoneModule -->\n\nHearthstoneService->HearthstoneModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
