// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id                        Int             @default(autoincrement()) @id
  text                      String
  deck                      Deck            @relation(fields: [deckId], references: [id])
  deckId                    Int
  authorId                  Int
}

model Deck {
  id                        Int             @default(autoincrement()) @id
  name                      String
  description               String          @default("")
  class                     HsClass?        @relation(fields: [classId], references: [blizzard_id])
  cards                     CardOnDeck[]
  nbCards                   Int             @default(0)
  isPublic                  Boolean         @default(true)
  comments                  Comment[]
  authorId Int
  classId Int

}

model CardOnDeck {
  id                        Int             @default(autoincrement()) @id
  deck                      Deck            @relation(fields: [deckId], references: [id])
  card                      Card            @relation(fields: [cardId], references: [blizzard_id])
  nb                        Int             @default(1)
  deckId                    Int
  cardId                    Int
}

model Card {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int?            @unique
  hsClass                   HsClass?        @relation("classCard", fields: [hsClassId], references: [blizzard_id])
  cardType                  CardType?       @relation(fields: [cardTypeId], references: [blizzard_id])
  minionType                MinionType?     @relation(fields: [minionTypeId], references: [blizzard_id])
  cardSet                   CardSet?        @relation(fields: [cardSetId], references: [blizzard_id])
  rarity                    Rarity?         @relation(fields: [rarityId], references: [blizzard_id])
  spellSchool               SpellSchool?    @relation(fields: [spellSchoolId], references: [blizzard_id])
  multiHsClass              MultiClassCard[]
  gameModeCards             GameModeCard[]
  keywordCards              KeywordCard[]
  decks                     CardOnDeck[]
  artistName                String?
  health                    Int?
  attack                    Int?
  manaCost                  Int?
  name                      String
  text                      String?
  image                     String?
  slug                      String           @unique
  imageGold                 String?
  flavorText                String?
  cropImage                 String?
  //key
  heroCardClassId           Int?
  powerCardClassId          Int?
  cardSetId                 Int?
  rarityId                  Int?
  hsClassId                 Int?
  cardTypeId                Int?
  minionTypeId              Int?
  spellSchoolId             Int?
}

model GameModeCard {
  id                        Int             @default(autoincrement()) @id
  gameMode                  GameMode        @relation(fields: [gameModeId], references: [blizzard_id])
  card                      Card            @relation(fields: [cardId], references: [blizzard_id])
  gameModeId                Int
  cardId                    Int
}

model KeywordCard {
  id                        Int             @default(autoincrement()) @id
  keyword                   Keyword         @relation(fields: [keywordId], references: [blizzard_id])
  card                      Card            @relation(fields: [cardId], references: [blizzard_id])
  keywordId                 Int
  cardId                    Int
}

model Keyword {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String          @default("")
  slug                      String          @unique
  keywordCards              KeywordCard[]
  text                      String
  refText                   String
}

model CardType {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String
  gameModes                 GameModeCardType[]
  cards                     Card[]
}

model GameMode {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  slug                      String
  name                      String
  gameModeCards             GameModeCard[]
  cardTypes                 GameModeCardType[]
  minionTypes               GameModeMinionType[]
}

model Rarity {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String
  craftingCost              Int[]
  dustValue                 Int[]
  cards                     Card[]
}

model SetGroup {
  id                        Int             @default(autoincrement()) @id
  name                      String
  slug                      String          @unique
  setGroupCards             SetGroupCard[]
  year                      Int?
  svg                       String?
  standard                  Boolean?
  icon                      String?
}

model SetGroupCard {
  id                        Int             @default(autoincrement()) @id
  setGroup                  SetGroup        @relation(fields: [setGroupSlug], references: [slug])
  cardSet                   CardSet         @relation(fields: [cardSetSlug], references: [slug])
  setGroupSlug              String
  cardSetSlug               String
}

model CardSet {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String          @unique
  type                      String
  setGroupCards             SetGroupCard[]
  collectibleCount          Int
  collectibleRevealedCount  Int
  nonCollectibleCount       Int
  nonCollectibleRevealedCount Int
  cards                     Card[]
}

model MinionType {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String          @unique
  cards                     Card[]
  gameModes                 GameModeMinionType[]
}

model GameModeCardType {
  id                        Int             @default(autoincrement()) @id
  gamemode                  GameMode        @relation(fields: [gameModeId], references: [blizzard_id])
  cardType                  CardType        @relation(fields: [cardTypeId], references: [blizzard_id])
  gameModeId                Int
  cardTypeId                Int
}

model GameModeMinionType {
  id                        Int             @default(autoincrement()) @id
  gamemode                  GameMode        @relation(fields: [gameModeId], references: [blizzard_id])
  minionType                MinionType      @relation(fields: [minionTypeId], references: [blizzard_id])
  gameModeId                Int
  minionTypeId              Int
}

model SpellSchool {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String          @unique
  cards                     Card[]
}

model MultiClassCard {
  id                        Int             @default(autoincrement()) @id
  hsClass                   HsClass         @relation(fields: [hsClassId], references: [blizzard_id])
  card                      Card            @relation(fields: [cardId], references: [blizzard_id])
  hsClassId                 Int
  cardId                    Int
}

model HsClass {
  id                        Int             @default(autoincrement()) @id
  blizzard_id               Int             @unique
  name                      String
  slug                      String          @unique
  cards                     Card[]          @relation("classCard")
  decks                     Deck[]
  multiClassCards           MultiClassCard[]
  powerCardId               Int?
  heroCardId                Int?
  alternateHeroCardIds      Int[]
}
